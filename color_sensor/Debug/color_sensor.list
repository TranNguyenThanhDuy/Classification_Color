
color_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080063d4  080063d4  000073d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a4  080064a4  00008064  2**0
                  CONTENTS
  4 .ARM          00000000  080064a4  080064a4  00008064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064a4  080064a4  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a4  080064a4  000074a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080064ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000064  08006510  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08006510  00008458  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d18  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002796  00000000  00000000  00019da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dde  00000000  00000000  0001d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e2e  00000000  00000000  0001e4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e53  00000000  00000000  000372d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000923db  00000000  00000000  0004d127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe8  00000000  00000000  000df548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e4530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080063bc 	.word	0x080063bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080063bc 	.word	0x080063bc

0800014c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000158:	78fb      	ldrb	r3, [r7, #3]
 800015a:	f023 030f 	bic.w	r3, r3, #15
 800015e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000160:	78fb      	ldrb	r3, [r7, #3]
 8000162:	011b      	lsls	r3, r3, #4
 8000164:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000166:	7bfb      	ldrb	r3, [r7, #15]
 8000168:	f043 030c 	orr.w	r3, r3, #12
 800016c:	b2db      	uxtb	r3, r3
 800016e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000170:	7bfb      	ldrb	r3, [r7, #15]
 8000172:	f043 0308 	orr.w	r3, r3, #8
 8000176:	b2db      	uxtb	r3, r3
 8000178:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800017a:	7bbb      	ldrb	r3, [r7, #14]
 800017c:	f043 030c 	orr.w	r3, r3, #12
 8000180:	b2db      	uxtb	r3, r3
 8000182:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000184:	7bbb      	ldrb	r3, [r7, #14]
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	b2db      	uxtb	r3, r3
 800018c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	6818      	ldr	r0, [r3, #0]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	791b      	ldrb	r3, [r3, #4]
 8000196:	4619      	mov	r1, r3
 8000198:	f107 0208 	add.w	r2, r7, #8
 800019c:	2364      	movs	r3, #100	@ 0x64
 800019e:	9300      	str	r3, [sp, #0]
 80001a0:	2304      	movs	r3, #4
 80001a2:	f002 fa4b 	bl	800263c <HAL_I2C_Master_Transmit>
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}

080001ae <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	b086      	sub	sp, #24
 80001b2:	af02      	add	r7, sp, #8
 80001b4:	6078      	str	r0, [r7, #4]
 80001b6:	460b      	mov	r3, r1
 80001b8:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80001ba:	78fb      	ldrb	r3, [r7, #3]
 80001bc:	f023 030f 	bic.w	r3, r3, #15
 80001c0:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80001c2:	78fb      	ldrb	r3, [r7, #3]
 80001c4:	011b      	lsls	r3, r3, #4
 80001c6:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	f043 030d 	orr.w	r3, r3, #13
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80001d2:	7bfb      	ldrb	r3, [r7, #15]
 80001d4:	f043 0309 	orr.w	r3, r3, #9
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80001dc:	7bbb      	ldrb	r3, [r7, #14]
 80001de:	f043 030d 	orr.w	r3, r3, #13
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	f043 0309 	orr.w	r3, r3, #9
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	791b      	ldrb	r3, [r3, #4]
 80001f8:	4619      	mov	r1, r3
 80001fa:	f107 0208 	add.w	r2, r7, #8
 80001fe:	2364      	movs	r3, #100	@ 0x64
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2304      	movs	r3, #4
 8000204:	f002 fa1a 	bl	800263c <HAL_I2C_Master_Transmit>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	607a      	str	r2, [r7, #4]
    if (row == 0)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d104      	bne.n	800022c <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	e003      	b.n	8000234 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000232:	60bb      	str	r3, [r7, #8]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4619      	mov	r1, r3
 800023a:	68f8      	ldr	r0, [r7, #12]
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
}
 8000240:	bf00      	nop
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000250:	2032      	movs	r0, #50	@ 0x32
 8000252:	f001 fa13 	bl	800167c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000256:	2130      	movs	r1, #48	@ 0x30
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ff77 	bl	800014c <lcd_send_cmd>
    HAL_Delay(5);
 800025e:	2005      	movs	r0, #5
 8000260:	f001 fa0c 	bl	800167c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000264:	2130      	movs	r1, #48	@ 0x30
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f7ff ff70 	bl	800014c <lcd_send_cmd>
    HAL_Delay(1);
 800026c:	2001      	movs	r0, #1
 800026e:	f001 fa05 	bl	800167c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000272:	2130      	movs	r1, #48	@ 0x30
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f7ff ff69 	bl	800014c <lcd_send_cmd>
    HAL_Delay(10);
 800027a:	200a      	movs	r0, #10
 800027c:	f001 f9fe 	bl	800167c <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000280:	2120      	movs	r1, #32
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f7ff ff62 	bl	800014c <lcd_send_cmd>
    HAL_Delay(10);
 8000288:	200a      	movs	r0, #10
 800028a:	f001 f9f7 	bl	800167c <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800028e:	2128      	movs	r1, #40	@ 0x28
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ff5b 	bl	800014c <lcd_send_cmd>
    HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f001 f9f0 	bl	800167c <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800029c:	2108      	movs	r1, #8
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f7ff ff54 	bl	800014c <lcd_send_cmd>
    HAL_Delay(1);
 80002a4:	2001      	movs	r0, #1
 80002a6:	f001 f9e9 	bl	800167c <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 80002aa:	2101      	movs	r1, #1
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f7ff ff4d 	bl	800014c <lcd_send_cmd>
    HAL_Delay(2);
 80002b2:	2002      	movs	r0, #2
 80002b4:	f001 f9e2 	bl	800167c <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 80002b8:	2106      	movs	r1, #6
 80002ba:	6878      	ldr	r0, [r7, #4]
 80002bc:	f7ff ff46 	bl	800014c <lcd_send_cmd>
    HAL_Delay(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f001 f9db 	bl	800167c <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 80002c6:	210c      	movs	r1, #12
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f7ff ff3f 	bl	800014c <lcd_send_cmd>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}

080002d6 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
 80002de:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80002e0:	e007      	b.n	80002f2 <lcd_puts+0x1c>
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	1c5a      	adds	r2, r3, #1
 80002e6:	603a      	str	r2, [r7, #0]
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	4619      	mov	r1, r3
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ff5e 	bl	80001ae <lcd_send_data>
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d1f3      	bne.n	80002e2 <lcd_puts+0xc>
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <write8>:
void getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c);
void getRGB(int *R, int *G, int *B);
void AverageFiltered(int* red, int* green, int* blue);
/* Writes a register and an 8 bit value over I2C */
void write8 (uint8_t reg, uint32_t value)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af02      	add	r7, sp, #8
 800030a:	4603      	mov	r3, r0
 800030c:	6039      	str	r1, [r7, #0]
 800030e:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000316:	b2db      	uxtb	r3, r3
 8000318:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = (value & 0xFF);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 2, 100);
 8000320:	f107 020c 	add.w	r2, r7, #12
 8000324:	2364      	movs	r3, #100	@ 0x64
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2302      	movs	r3, #2
 800032a:	2152      	movs	r1, #82	@ 0x52
 800032c:	4803      	ldr	r0, [pc, #12]	@ (800033c <write8+0x38>)
 800032e:	f002 f985 	bl	800263c <HAL_I2C_Master_Transmit>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000b0 	.word	0x200000b0

08000340 <read8>:

/* Reads an 8 bit value over I2C */
uint8_t read8(uint8_t reg)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af02      	add	r7, sp, #8
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[1];
    buffer[0] = (TCS34725_COMMAND_BIT | reg);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000350:	b2db      	uxtb	r3, r3
 8000352:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 1, 100);
 8000354:	f107 020c 	add.w	r2, r7, #12
 8000358:	2364      	movs	r3, #100	@ 0x64
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2301      	movs	r3, #1
 800035e:	2152      	movs	r1, #82	@ 0x52
 8000360:	4808      	ldr	r0, [pc, #32]	@ (8000384 <read8+0x44>)
 8000362:	f002 f96b 	bl	800263c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 1, 100);
 8000366:	f107 020c 	add.w	r2, r7, #12
 800036a:	2364      	movs	r3, #100	@ 0x64
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	2152      	movs	r1, #82	@ 0x52
 8000372:	4804      	ldr	r0, [pc, #16]	@ (8000384 <read8+0x44>)
 8000374:	f002 fa60 	bl	8002838 <HAL_I2C_Master_Receive>
    return buffer[0];
 8000378:	7b3b      	ldrb	r3, [r7, #12]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000b0 	.word	0x200000b0

08000388 <read16>:

/* Reads a 16 bit values over I2C */
uint16_t read16(uint8_t reg)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af02      	add	r7, sp, #8
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
  uint16_t ret;
    uint8_t txBuffer[1],rxBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000398:	b2db      	uxtb	r3, r3
 800039a:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 1, 100);
 800039c:	f107 020c 	add.w	r2, r7, #12
 80003a0:	2364      	movs	r3, #100	@ 0x64
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2301      	movs	r3, #1
 80003a6:	2152      	movs	r1, #82	@ 0x52
 80003a8:	480d      	ldr	r0, [pc, #52]	@ (80003e0 <read16+0x58>)
 80003aa:	f002 f947 	bl	800263c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, rxBuffer, 2, 100);
 80003ae:	f107 0208 	add.w	r2, r7, #8
 80003b2:	2364      	movs	r3, #100	@ 0x64
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2302      	movs	r3, #2
 80003b8:	2152      	movs	r1, #82	@ 0x52
 80003ba:	4809      	ldr	r0, [pc, #36]	@ (80003e0 <read16+0x58>)
 80003bc:	f002 fa3c 	bl	8002838 <HAL_I2C_Master_Receive>
    ret = rxBuffer[1];
 80003c0:	7a7b      	ldrb	r3, [r7, #9]
 80003c2:	81fb      	strh	r3, [r7, #14]
    ret <<= 8;
 80003c4:	89fb      	ldrh	r3, [r7, #14]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	81fb      	strh	r3, [r7, #14]
    ret |= rxBuffer[0] & 0xFF;
 80003ca:	7a3b      	ldrb	r3, [r7, #8]
 80003cc:	461a      	mov	r2, r3
 80003ce:	89fb      	ldrh	r3, [r7, #14]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	81fb      	strh	r3, [r7, #14]
  return ret;
 80003d4:	89fb      	ldrh	r3, [r7, #14]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000b0 	.word	0x200000b0

080003e4 <enable>:

void enable(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 80003e8:	2101      	movs	r1, #1
 80003ea:	2000      	movs	r0, #0
 80003ec:	f7ff ff8a 	bl	8000304 <write8>
  HAL_Delay(3);
 80003f0:	2003      	movs	r0, #3
 80003f2:	f001 f943 	bl	800167c <HAL_Delay>
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 80003f6:	2103      	movs	r1, #3
 80003f8:	2000      	movs	r0, #0
 80003fa:	f7ff ff83 	bl	8000304 <write8>
  HAL_Delay(50);
 80003fe:	2032      	movs	r0, #50	@ 0x32
 8000400:	f001 f93c 	bl	800167c <HAL_Delay>
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}

08000408 <setIntegrationTime>:
  reg = read8(TCS34725_ENABLE);
  write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}

void setIntegrationTime(uint8_t itime)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8000412:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <setIntegrationTime+0x28>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d101      	bne.n	800041e <setIntegrationTime+0x16>
 800041a:	f000 f821 	bl	8000460 <tcs3272_init>
  write8(TCS34725_ATIME, itime);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4619      	mov	r1, r3
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ff6e 	bl	8000304 <write8>
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200002fa 	.word	0x200002fa

08000434 <setGain>:

void setGain(uint8_t gain)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 800043e:	4b07      	ldr	r3, [pc, #28]	@ (800045c <setGain+0x28>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d101      	bne.n	800044a <setGain+0x16>
 8000446:	f000 f80b 	bl	8000460 <tcs3272_init>
  write8(TCS34725_CONTROL, gain);
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	4619      	mov	r1, r3
 800044e:	200f      	movs	r0, #15
 8000450:	f7ff ff58 	bl	8000304 <write8>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200002fa 	.word	0x200002fa

08000460 <tcs3272_init>:

void tcs3272_init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
  /* Make sure we're actually connected */
  uint8_t readValue = read8(TCS34725_ID);
 8000466:	2012      	movs	r0, #18
 8000468:	f7ff ff6a 	bl	8000340 <read8>
 800046c:	4603      	mov	r3, r0
 800046e:	71fb      	strb	r3, [r7, #7]
  if ((readValue != 0x44) && (readValue != 0x10))
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	2b44      	cmp	r3, #68	@ 0x44
 8000474:	d002      	beq.n	800047c <tcs3272_init+0x1c>
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b10      	cmp	r3, #16
 800047a:	d10b      	bne.n	8000494 <tcs3272_init+0x34>
  {
    return;
  }
  _tcs34725Initialised = 1;
 800047c:	4b07      	ldr	r3, [pc, #28]	@ (800049c <tcs3272_init+0x3c>)
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
  /* Set default integration time and gain */
  setIntegrationTime(TCS34725_INTEGRATIONTIME_50MS);
 8000482:	20eb      	movs	r0, #235	@ 0xeb
 8000484:	f7ff ffc0 	bl	8000408 <setIntegrationTime>
  setGain(TCS34725_GAIN_4X);
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ffd3 	bl	8000434 <setGain>
  /* Note: by default, the device is in power down mode on bootup */
  enable();
 800048e:	f7ff ffa9 	bl	80003e4 <enable>
 8000492:	e000      	b.n	8000496 <tcs3272_init+0x36>
    return;
 8000494:	bf00      	nop
}
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200002fa 	.word	0x200002fa

080004a0 <getRawData>:

/* Get raw data */
void getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	603b      	str	r3, [r7, #0]
  if (_tcs34725Initialised == 0) tcs3272_init();
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <getRawData+0x60>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d101      	bne.n	80004ba <getRawData+0x1a>
 80004b6:	f7ff ffd3 	bl	8000460 <tcs3272_init>

  *c = read16(TCS34725_CDATAL);
 80004ba:	2014      	movs	r0, #20
 80004bc:	f7ff ff64 	bl	8000388 <read16>
 80004c0:	4603      	mov	r3, r0
 80004c2:	461a      	mov	r2, r3
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	801a      	strh	r2, [r3, #0]
  *r = read16(TCS34725_RDATAL);
 80004c8:	2016      	movs	r0, #22
 80004ca:	f7ff ff5d 	bl	8000388 <read16>
 80004ce:	4603      	mov	r3, r0
 80004d0:	461a      	mov	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	801a      	strh	r2, [r3, #0]
  *g = read16(TCS34725_GDATAL);
 80004d6:	2018      	movs	r0, #24
 80004d8:	f7ff ff56 	bl	8000388 <read16>
 80004dc:	4603      	mov	r3, r0
 80004de:	461a      	mov	r2, r3
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	801a      	strh	r2, [r3, #0]
  *b = read16(TCS34725_BDATAL);
 80004e4:	201a      	movs	r0, #26
 80004e6:	f7ff ff4f 	bl	8000388 <read16>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	801a      	strh	r2, [r3, #0]
  /* Delay time is from page no 16/26 from the datasheet  (256 − ATIME)* 2.4ms */
  HAL_Delay(50); // Set delay for (256 − 0xEB)* 2.4ms = 50ms
 80004f2:	2032      	movs	r0, #50	@ 0x32
 80004f4:	f001 f8c2 	bl	800167c <HAL_Delay>
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200002fa 	.word	0x200002fa

08000504 <getRGB>:

/* Get Red, Green and Blue color from Raw Data */
void getRGB(int *R, int *G, int *B)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	f107 0212 	add.w	r2, r7, #18
 8000518:	f107 0114 	add.w	r1, r7, #20
 800051c:	f107 0016 	add.w	r0, r7, #22
 8000520:	f7ff ffbe 	bl	80004a0 <getRawData>
    if(rawClear == 0)
 8000524:	8a3b      	ldrh	r3, [r7, #16]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d109      	bne.n	800053e <getRGB+0x3a>
    {
      *R = 0;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
      *G = 0;
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
      *B = 0;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
    {
      *R = (int)rawRed * 255 / rawClear;
      *G = (int)rawGreen * 255 / rawClear;
      *B = (int)rawBlue * 255 / rawClear;
    }
}
 800053c:	e01d      	b.n	800057a <getRGB+0x76>
      *R = (int)rawRed * 255 / rawClear;
 800053e:	8afb      	ldrh	r3, [r7, #22]
 8000540:	461a      	mov	r2, r3
 8000542:	4613      	mov	r3, r2
 8000544:	021b      	lsls	r3, r3, #8
 8000546:	1a9b      	subs	r3, r3, r2
 8000548:	8a3a      	ldrh	r2, [r7, #16]
 800054a:	fb93 f2f2 	sdiv	r2, r3, r2
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
      *G = (int)rawGreen * 255 / rawClear;
 8000552:	8abb      	ldrh	r3, [r7, #20]
 8000554:	461a      	mov	r2, r3
 8000556:	4613      	mov	r3, r2
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	8a3a      	ldrh	r2, [r7, #16]
 800055e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	601a      	str	r2, [r3, #0]
      *B = (int)rawBlue * 255 / rawClear;
 8000566:	8a7b      	ldrh	r3, [r7, #18]
 8000568:	461a      	mov	r2, r3
 800056a:	4613      	mov	r3, r2
 800056c:	021b      	lsls	r3, r3, #8
 800056e:	1a9b      	subs	r3, r3, r2
 8000570:	8a3a      	ldrh	r2, [r7, #16]
 8000572:	fb93 f2f2 	sdiv	r2, r3, r2
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <AverageFiltered>:
void AverageFiltered(int* red, int* green, int* blue)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	@ 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
    int sum_red = 0, sum_green = 0, sum_blue = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000594:	2300      	movs	r3, #0
 8000596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < RGB_SAMPLES; i++) {
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
 80005a0:	e017      	b.n	80005d2 <AverageFiltered+0x4e>

        int current_red, current_green, current_blue;
        getRGB(&current_red, &current_green, &current_blue);
 80005a2:	f107 0214 	add.w	r2, r7, #20
 80005a6:	f107 0118 	add.w	r1, r7, #24
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffa8 	bl	8000504 <getRGB>

        sum_red += current_red;
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005b8:	4413      	add	r3, r2
 80005ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sum_green += current_green;
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005c0:	4413      	add	r3, r2
 80005c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        sum_blue += current_blue;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005c8:	4413      	add	r3, r2
 80005ca:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < RGB_SAMPLES; i++) {
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	3301      	adds	r3, #1
 80005d0:	623b      	str	r3, [r7, #32]
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	2b09      	cmp	r3, #9
 80005d6:	dde4      	ble.n	80005a2 <AverageFiltered+0x1e>
    }

    *red = sum_red / RGB_SAMPLES;
 80005d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005da:	4a0f      	ldr	r2, [pc, #60]	@ (8000618 <AverageFiltered+0x94>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1092      	asrs	r2, r2, #2
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad2      	subs	r2, r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	601a      	str	r2, [r3, #0]
    *green = sum_green / RGB_SAMPLES;
 80005ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <AverageFiltered+0x94>)
 80005ee:	fb82 1203 	smull	r1, r2, r2, r3
 80005f2:	1092      	asrs	r2, r2, #2
 80005f4:	17db      	asrs	r3, r3, #31
 80005f6:	1ad2      	subs	r2, r2, r3
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	601a      	str	r2, [r3, #0]
    *blue = sum_blue / RGB_SAMPLES;
 80005fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005fe:	4a06      	ldr	r2, [pc, #24]	@ (8000618 <AverageFiltered+0x94>)
 8000600:	fb82 1203 	smull	r1, r2, r2, r3
 8000604:	1092      	asrs	r2, r2, #2
 8000606:	17db      	asrs	r3, r3, #31
 8000608:	1ad2      	subs	r2, r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	@ 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	66666667 	.word	0x66666667

0800061c <StepperMotor_Start>:

void StepperMotor_Start(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    //	HAL_ADC_Start_IT(&hadc1);
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000620:	2100      	movs	r1, #0
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <StepperMotor_Start+0x30>)
 8000624:	f003 fc68 	bl	8003ef8 <HAL_TIM_PWM_Start_IT>
    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, MOTOR_ENABLED);
 8000628:	2200      	movs	r2, #0
 800062a:	2110      	movs	r1, #16
 800062c:	4808      	ldr	r0, [pc, #32]	@ (8000650 <StepperMotor_Start+0x34>)
 800062e:	f001 fe90 	bl	8002352 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Pulse_up);
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <StepperMotor_Start+0x38>)
 8000634:	881a      	ldrh	r2, [r3, #0]
 8000636:	4b05      	ldr	r3, [pc, #20]	@ (800064c <StepperMotor_Start+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, DIR_COUNTERCLOCKWISE);
 800063c:	2200      	movs	r2, #0
 800063e:	2120      	movs	r1, #32
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <StepperMotor_Start+0x34>)
 8000642:	f001 fe86 	bl	8002352 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200001a0 	.word	0x200001a0
 8000650:	40010800 	.word	0x40010800
 8000654:	20000004 	.word	0x20000004

08000658 <StepperMotor_Stop>:

void StepperMotor_Stop(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, MOTOR_DISABLED );
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <StepperMotor_Stop+0x1c>)
 8000662:	f001 fe76 	bl	8002352 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000666:	2100      	movs	r1, #0
 8000668:	4803      	ldr	r0, [pc, #12]	@ (8000678 <StepperMotor_Stop+0x20>)
 800066a:	f003 fd35 	bl	80040d8 <HAL_TIM_PWM_Stop_IT>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010800 	.word	0x40010800
 8000678:	200001a0 	.word	0x200001a0

0800067c <checkColor>:

void checkColor(int red, int green, int blue)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
//    	flag_blue = 1;
//    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
//    }
//

    if ((red > 190 && green < 40 && blue <= 35) )
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2bbe      	cmp	r3, #190	@ 0xbe
 800068c:	dd0e      	ble.n	80006ac <checkColor+0x30>
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	2b27      	cmp	r3, #39	@ 0x27
 8000692:	dc0b      	bgt.n	80006ac <checkColor+0x30>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b23      	cmp	r3, #35	@ 0x23
 8000698:	dc08      	bgt.n	80006ac <checkColor+0x30>
      {
          flag_red = 1;
 800069a:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <checkColor+0x90>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2108      	movs	r1, #8
 80006a4:	481a      	ldr	r0, [pc, #104]	@ (8000710 <checkColor+0x94>)
 80006a6:	f001 fe54 	bl	8002352 <HAL_GPIO_WritePin>
 80006aa:	e02a      	b.n	8000702 <checkColor+0x86>
      }else if(red >= 90 && green > 105 && blue > 41)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2b59      	cmp	r3, #89	@ 0x59
 80006b0:	dd0e      	ble.n	80006d0 <checkColor+0x54>
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b69      	cmp	r3, #105	@ 0x69
 80006b6:	dd0b      	ble.n	80006d0 <checkColor+0x54>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b29      	cmp	r3, #41	@ 0x29
 80006bc:	dd08      	ble.n	80006d0 <checkColor+0x54>
      {
      	flag_green = 1;
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <checkColor+0x98>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
      	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2108      	movs	r1, #8
 80006c8:	4811      	ldr	r0, [pc, #68]	@ (8000710 <checkColor+0x94>)
 80006ca:	f001 fe42 	bl	8002352 <HAL_GPIO_WritePin>
 80006ce:	e018      	b.n	8000702 <checkColor+0x86>
      }else if(red < 90 && (green > 88 && green < 100)  && blue > 85)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2b59      	cmp	r3, #89	@ 0x59
 80006d4:	dc11      	bgt.n	80006fa <checkColor+0x7e>
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b58      	cmp	r3, #88	@ 0x58
 80006da:	dd0e      	ble.n	80006fa <checkColor+0x7e>
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	2b63      	cmp	r3, #99	@ 0x63
 80006e0:	dc0b      	bgt.n	80006fa <checkColor+0x7e>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b55      	cmp	r3, #85	@ 0x55
 80006e6:	dd08      	ble.n	80006fa <checkColor+0x7e>
      {
      	flag_blue = 1;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <checkColor+0x9c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
      	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2108      	movs	r1, #8
 80006f2:	4807      	ldr	r0, [pc, #28]	@ (8000710 <checkColor+0x94>)
 80006f4:	f001 fe2d 	bl	8002352 <HAL_GPIO_WritePin>
 80006f8:	e003      	b.n	8000702 <checkColor+0x86>
      }else{
      	flag_error = 1;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <checkColor+0xa0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
//        else
//        {
//        	flag_error = 1;
//        }

}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000023c 	.word	0x2000023c
 8000710:	40010c00 	.word	0x40010c00
 8000714:	20000240 	.word	0x20000240
 8000718:	20000244 	.word	0x20000244
 800071c:	20000248 	.word	0x20000248

08000720 <updateAngle>:

void updateAngle(uint32_t new_angle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if (current_angle != new_angle)
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <updateAngle+0x88>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	d032      	beq.n	8000798 <updateAngle+0x78>
    {
        if (current_angle < new_angle)
 8000732:	4b1d      	ldr	r3, [pc, #116]	@ (80007a8 <updateAngle+0x88>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d912      	bls.n	8000762 <updateAngle+0x42>
        {
            for (int y = current_angle; y <= new_angle; y += 3)
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <updateAngle+0x88>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	e009      	b.n	8000758 <updateAngle+0x38>
            {
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, y);
 8000744:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <updateAngle+0x8c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34
                HAL_Delay(3);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 ff95 	bl	800167c <HAL_Delay>
            for (int y = current_angle; y <= new_angle; y += 3)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3303      	adds	r3, #3
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	d2f1      	bcs.n	8000744 <updateAngle+0x24>
 8000760:	e016      	b.n	8000790 <updateAngle+0x70>
            }
        }
        else if (current_angle > new_angle)
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <updateAngle+0x88>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	d211      	bcs.n	8000790 <updateAngle+0x70>
        {
            for (int y = current_angle; y >= new_angle; y -= 3)
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <updateAngle+0x88>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	e009      	b.n	8000788 <updateAngle+0x68>
            {
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, y);
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <updateAngle+0x8c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34
                HAL_Delay(3);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 ff7d 	bl	800167c <HAL_Delay>
            for (int y = current_angle; y >= new_angle; y -= 3)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	3b03      	subs	r3, #3
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	d9f1      	bls.n	8000774 <updateAngle+0x54>
            }
        }
        current_angle = new_angle;
 8000790:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <updateAngle+0x88>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
    }
    else
    {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, new_angle);
    }
}
 8000796:	e003      	b.n	80007a0 <updateAngle+0x80>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, new_angle);
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <updateAngle+0x8c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000158 	.word	0x20000158

080007b0 <controlServo>:

void controlServo(int red, int green, int blue)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
    if (flag_red == 1)
 80007bc:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <controlServo+0xcc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d111      	bne.n	80007e8 <controlServo+0x38>
    {
        new_angle = 750;
 80007c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <controlServo+0xd0>)
 80007c6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80007ca:	601a      	str	r2, [r3, #0]
        updateAngle(new_angle);
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <controlServo+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ffa5 	bl	8000720 <updateAngle>
        flag_red = 0;
 80007d6:	4b29      	ldr	r3, [pc, #164]	@ (800087c <controlServo+0xcc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
        counting_red++;
 80007dc:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <controlServo+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <controlServo+0xd4>)
 80007e4:	6013      	str	r3, [r2, #0]
    	flag_error = 0;
    	StepperMotor_Stop();
    	motor_state = 0;

    }
}
 80007e6:	e044      	b.n	8000872 <controlServo+0xc2>
    else if (flag_green == 1)
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <controlServo+0xd8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d110      	bne.n	8000812 <controlServo+0x62>
        new_angle = 250;
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <controlServo+0xd0>)
 80007f2:	22fa      	movs	r2, #250	@ 0xfa
 80007f4:	601a      	str	r2, [r3, #0]
        updateAngle(new_angle);
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <controlServo+0xd0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff90 	bl	8000720 <updateAngle>
        flag_green = 0;
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <controlServo+0xd8>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
        counting_green++;
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <controlServo+0xdc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <controlServo+0xdc>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	e02f      	b.n	8000872 <controlServo+0xc2>
    else if (flag_blue == 1)
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <controlServo+0xe0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d111      	bne.n	800083e <controlServo+0x8e>
        new_angle = 1175;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <controlServo+0xd0>)
 800081c:	f240 4297 	movw	r2, #1175	@ 0x497
 8000820:	601a      	str	r2, [r3, #0]
        updateAngle(new_angle);
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <controlServo+0xd0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff7a 	bl	8000720 <updateAngle>
        flag_blue = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <controlServo+0xe0>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
        counting_blue++;
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <controlServo+0xe4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a16      	ldr	r2, [pc, #88]	@ (8000894 <controlServo+0xe4>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	e019      	b.n	8000872 <controlServo+0xc2>
    else if(flag_error == 1)
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <controlServo+0xe8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d115      	bne.n	8000872 <controlServo+0xc2>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4814      	ldr	r0, [pc, #80]	@ (800089c <controlServo+0xec>)
 800084c:	f001 fd81 	bl	8002352 <HAL_GPIO_WritePin>
    	HAL_Delay(1000);
 8000850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000854:	f000 ff12 	bl	800167c <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2108      	movs	r1, #8
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <controlServo+0xec>)
 800085e:	f001 fd78 	bl	8002352 <HAL_GPIO_WritePin>
    	flag_error = 0;
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <controlServo+0xe8>)
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
    	StepperMotor_Stop();
 8000868:	f7ff fef6 	bl	8000658 <StepperMotor_Stop>
    	motor_state = 0;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <controlServo+0xf0>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000023c 	.word	0x2000023c
 8000880:	2000025c 	.word	0x2000025c
 8000884:	2000024c 	.word	0x2000024c
 8000888:	20000240 	.word	0x20000240
 800088c:	20000250 	.word	0x20000250
 8000890:	20000244 	.word	0x20000244
 8000894:	20000254 	.word	0x20000254
 8000898:	20000248 	.word	0x20000248
 800089c:	40010c00 	.word	0x40010c00
 80008a0:	20000006 	.word	0x20000006

080008a4 <update_number>:


void update_number(int red, int green, int blue)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 	  sprintf(buffer_red, "%u" , red);
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4916      	ldr	r1, [pc, #88]	@ (800090c <update_number+0x68>)
 80008b4:	4816      	ldr	r0, [pc, #88]	@ (8000910 <update_number+0x6c>)
 80008b6:	f005 f8d1 	bl	8005a5c <siprintf>
 	  lcd_gotoxy(&lcd1, 0, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2100      	movs	r1, #0
 80008be:	4815      	ldr	r0, [pc, #84]	@ (8000914 <update_number+0x70>)
 80008c0:	f7ff fca6 	bl	8000210 <lcd_gotoxy>
 	  lcd_puts(&lcd1, buffer_red);
 80008c4:	4912      	ldr	r1, [pc, #72]	@ (8000910 <update_number+0x6c>)
 80008c6:	4813      	ldr	r0, [pc, #76]	@ (8000914 <update_number+0x70>)
 80008c8:	f7ff fd05 	bl	80002d6 <lcd_puts>
 	  sprintf(buffer_green, "%u" , green);
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	490f      	ldr	r1, [pc, #60]	@ (800090c <update_number+0x68>)
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <update_number+0x74>)
 80008d2:	f005 f8c3 	bl	8005a5c <siprintf>
 	  lcd_gotoxy(&lcd1, 7, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2107      	movs	r1, #7
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <update_number+0x70>)
 80008dc:	f7ff fc98 	bl	8000210 <lcd_gotoxy>
 	  lcd_puts(&lcd1, buffer_green);
 80008e0:	490d      	ldr	r1, [pc, #52]	@ (8000918 <update_number+0x74>)
 80008e2:	480c      	ldr	r0, [pc, #48]	@ (8000914 <update_number+0x70>)
 80008e4:	f7ff fcf7 	bl	80002d6 <lcd_puts>
 	  sprintf(buffer_blue, "%u" , blue);
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4908      	ldr	r1, [pc, #32]	@ (800090c <update_number+0x68>)
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <update_number+0x78>)
 80008ee:	f005 f8b5 	bl	8005a5c <siprintf>
 	  lcd_gotoxy(&lcd1, 13, 1);
 80008f2:	2201      	movs	r2, #1
 80008f4:	210d      	movs	r1, #13
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <update_number+0x70>)
 80008f8:	f7ff fc8a 	bl	8000210 <lcd_gotoxy>
 	  lcd_puts(&lcd1, buffer_blue);
 80008fc:	4907      	ldr	r1, [pc, #28]	@ (800091c <update_number+0x78>)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <update_number+0x70>)
 8000900:	f7ff fce9 	bl	80002d6 <lcd_puts>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	080063d4 	.word	0x080063d4
 8000910:	20000260 	.word	0x20000260
 8000914:	20000230 	.word	0x20000230
 8000918:	20000294 	.word	0x20000294
 800091c:	200002c8 	.word	0x200002c8

08000920 <print_out>:

void print_out(int red, int green, int blue)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
 		lcd_gotoxy(&lcd1, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	4807      	ldr	r0, [pc, #28]	@ (8000950 <print_out+0x30>)
 8000932:	f7ff fc6d 	bl	8000210 <lcd_gotoxy>
 		lcd_puts(&lcd1, "RED  GREEN  BLUE");
 8000936:	4907      	ldr	r1, [pc, #28]	@ (8000954 <print_out+0x34>)
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <print_out+0x30>)
 800093a:	f7ff fccc 	bl	80002d6 <lcd_puts>
 		update_number(red, green, blue);
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f7ff ffae 	bl	80008a4 <update_number>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000230 	.word	0x20000230
 8000954:	080063d8 	.word	0x080063d8

08000958 <checkIRAndControl>:

void checkIRAndControl()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	@ 0x70
 800095c:	af02      	add	r7, sp, #8
    IR_1 = HAL_GPIO_ReadPin(IR_PORT_1, IR_PIN_1);
 800095e:	2108      	movs	r1, #8
 8000960:	4822      	ldr	r0, [pc, #136]	@ (80009ec <checkIRAndControl+0x94>)
 8000962:	f001 fcdf 	bl	8002324 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <checkIRAndControl+0x98>)
 800096c:	601a      	str	r2, [r3, #0]

    if (IR_1 == 0)
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <checkIRAndControl+0x98>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <checkIRAndControl+0x24>
    {
        flag_IR_1 = 1;
 8000976:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <checkIRAndControl+0x9c>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
    }

    if (IR_1 == 1 && flag_IR_1 == 1)
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <checkIRAndControl+0x98>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d12f      	bne.n	80009e4 <checkIRAndControl+0x8c>
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <checkIRAndControl+0x9c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d12b      	bne.n	80009e4 <checkIRAndControl+0x8c>
    {
        controlServo(red, green, blue);
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <checkIRAndControl+0xa0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1a      	ldr	r2, [pc, #104]	@ (80009fc <checkIRAndControl+0xa4>)
 8000992:	6811      	ldr	r1, [r2, #0]
 8000994:	4a1a      	ldr	r2, [pc, #104]	@ (8000a00 <checkIRAndControl+0xa8>)
 8000996:	6812      	ldr	r2, [r2, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff09 	bl	80007b0 <controlServo>
        char buffer_counting[100];
        int length_counting = snprintf(buffer_counting, sizeof(buffer_counting), "Red objects: %d, Green objects: %d, Blue objects: %d\r\n", counting_red, counting_green, counting_blue);
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <checkIRAndControl+0xac>)
 80009a0:	6819      	ldr	r1, [r3, #0]
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <checkIRAndControl+0xb0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <checkIRAndControl+0xb4>)
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	4638      	mov	r0, r7
 80009ac:	9201      	str	r2, [sp, #4]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	460b      	mov	r3, r1
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <checkIRAndControl+0xb8>)
 80009b4:	2164      	movs	r1, #100	@ 0x64
 80009b6:	f005 f81d 	bl	80059f4 <sniprintf>
 80009ba:	6678      	str	r0, [r7, #100]	@ 0x64
        HAL_UART_Transmit(&huart1, (uint8_t*)buffer_counting, length_counting, 1000);
 80009bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4639      	mov	r1, r7
 80009c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c6:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <checkIRAndControl+0xbc>)
 80009c8:	f004 fa4e 	bl	8004e68 <HAL_UART_Transmit>
        print_out(counting_red, counting_green, counting_blue);
 80009cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <checkIRAndControl+0xac>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <checkIRAndControl+0xb0>)
 80009d2:	6811      	ldr	r1, [r2, #0]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <checkIRAndControl+0xb4>)
 80009d6:	6812      	ldr	r2, [r2, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffa1 	bl	8000920 <print_out>
        flag_IR_1 = 0;
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <checkIRAndControl+0x9c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
    }
}
 80009e4:	bf00      	nop
 80009e6:	3768      	adds	r7, #104	@ 0x68
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40010800 	.word	0x40010800
 80009f0:	20000238 	.word	0x20000238
 80009f4:	20000258 	.word	0x20000258
 80009f8:	200002fc 	.word	0x200002fc
 80009fc:	20000300 	.word	0x20000300
 8000a00:	20000304 	.word	0x20000304
 8000a04:	2000024c 	.word	0x2000024c
 8000a08:	20000250 	.word	0x20000250
 8000a0c:	20000254 	.word	0x20000254
 8000a10:	080063ec 	.word	0x080063ec
 8000a14:	200001e8 	.word	0x200001e8

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b090      	sub	sp, #64	@ 0x40
 8000a1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f000 fdcb 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f875 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f000 fa7f 	bl	8000f28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a2a:	f000 f90b 	bl	8000c44 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a2e:	f000 fa51 	bl	8000ed4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a32:	f000 f963 	bl	8000cfc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a36:	f000 f9d7 	bl	8000de8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a3a:	f000 f8c5 	bl	8000bc8 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000a3e:	f000 f92f 	bl	8000ca0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hi2c = &hi2c2;
 8000a42:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <main+0xc8>)
 8000a44:	4a27      	ldr	r2, [pc, #156]	@ (8000ae4 <main+0xcc>)
 8000a46:	601a      	str	r2, [r3, #0]
  lcd1.address = 0x4E;
 8000a48:	4b25      	ldr	r3, [pc, #148]	@ (8000ae0 <main+0xc8>)
 8000a4a:	224e      	movs	r2, #78	@ 0x4e
 8000a4c:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd1);
 8000a4e:	4824      	ldr	r0, [pc, #144]	@ (8000ae0 <main+0xc8>)
 8000a50:	f7ff fbfa 	bl	8000248 <lcd_init>
  print_out(counting_red, counting_green, counting_blue);
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <main+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a24      	ldr	r2, [pc, #144]	@ (8000aec <main+0xd4>)
 8000a5a:	6811      	ldr	r1, [r2, #0]
 8000a5c:	4a24      	ldr	r2, [pc, #144]	@ (8000af0 <main+0xd8>)
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <print_out>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1) ;
 8000a66:	2100      	movs	r1, #0
 8000a68:	4822      	ldr	r0, [pc, #136]	@ (8000af4 <main+0xdc>)
 8000a6a:	f003 fa45 	bl	8003ef8 <HAL_TIM_PWM_Start_IT>
  StepperMotor_Start();
 8000a6e:	f7ff fdd5 	bl	800061c <StepperMotor_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (motor_state)
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <main+0xe0>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <main+0x6a>
	  {
		  //StepperMotor_Stop();
		  StepperMotor_Start();
 8000a7c:	f7ff fdce 	bl	800061c <StepperMotor_Start>
 8000a80:	e006      	b.n	8000a90 <main+0x78>
	  }
	  else if (motor_state == 0)
 8000a82:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <main+0xe0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d101      	bne.n	8000a90 <main+0x78>
	  {
		  StepperMotor_Stop();
 8000a8c:	f7ff fde4 	bl	8000658 <StepperMotor_Stop>
	  }
      AverageFiltered(&red, &green, &blue);
 8000a90:	4a1a      	ldr	r2, [pc, #104]	@ (8000afc <main+0xe4>)
 8000a92:	491b      	ldr	r1, [pc, #108]	@ (8000b00 <main+0xe8>)
 8000a94:	481b      	ldr	r0, [pc, #108]	@ (8000b04 <main+0xec>)
 8000a96:	f7ff fd75 	bl	8000584 <AverageFiltered>
	  checkColor(red, green, blue);
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <main+0xec>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a18      	ldr	r2, [pc, #96]	@ (8000b00 <main+0xe8>)
 8000aa0:	6811      	ldr	r1, [r2, #0]
 8000aa2:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <main+0xe4>)
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fde8 	bl	800067c <checkColor>
	  checkIRAndControl();
 8000aac:	f7ff ff54 	bl	8000958 <checkIRAndControl>
	  char buffer[50];
	  int length = snprintf(buffer, sizeof(buffer), "Red: %d, Green: %d, Blue: %d\r\n", red, green, blue);
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <main+0xec>)
 8000ab2:	6819      	ldr	r1, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <main+0xe8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <main+0xe4>)
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	4638      	mov	r0, r7
 8000abe:	9201      	str	r2, [sp, #4]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <main+0xf0>)
 8000ac6:	2132      	movs	r1, #50	@ 0x32
 8000ac8:	f004 ff94 	bl	80059f4 <sniprintf>
 8000acc:	6378      	str	r0, [r7, #52]	@ 0x34
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, 1000);
 8000ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	4639      	mov	r1, r7
 8000ad4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <main+0xf4>)
 8000ada:	f004 f9c5 	bl	8004e68 <HAL_UART_Transmit>
  {
 8000ade:	e7c8      	b.n	8000a72 <main+0x5a>
 8000ae0:	20000230 	.word	0x20000230
 8000ae4:	20000104 	.word	0x20000104
 8000ae8:	2000024c 	.word	0x2000024c
 8000aec:	20000250 	.word	0x20000250
 8000af0:	20000254 	.word	0x20000254
 8000af4:	20000158 	.word	0x20000158
 8000af8:	20000006 	.word	0x20000006
 8000afc:	20000304 	.word	0x20000304
 8000b00:	20000300 	.word	0x20000300
 8000b04:	200002fc 	.word	0x200002fc
 8000b08:	08006424 	.word	0x08006424
 8000b0c:	200001e8 	.word	0x200001e8

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	@ 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b1a:	2228      	movs	r2, #40	@ 0x28
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 ffbc 	bl	8005a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b5c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fc58 	bl	800341c <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b72:	f000 fa79 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 fec4 	bl	8003920 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b9e:	f000 fa63 	bl	8001068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000baa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 f844 	bl	8003c3c <HAL_RCCEx_PeriphCLKConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bba:	f000 fa55 	bl	8001068 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	@ 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000bda:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <MX_ADC1_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000bf2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000bf6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf8:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c04:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000c06:	f000 fd5d 	bl	80016c4 <HAL_ADC_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c10:	f000 fa2a 	bl	8001068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c14:	2307      	movs	r3, #7
 8000c16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_ADC1_Init+0x74>)
 8000c26:	f000 fef7 	bl	8001a18 <HAL_ADC_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c30:	f000 fa1a 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000080 	.word	0x20000080
 8000c40:	40012400 	.word	0x40012400

08000c44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c4a:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <MX_I2C1_Init+0x54>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c50:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <MX_I2C1_Init+0x58>)
 8000c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c82:	f001 fb97 	bl	80023b4 <HAL_I2C_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c8c:	f000 f9ec 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000b0 	.word	0x200000b0
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	00061a80 	.word	0x00061a80

08000ca0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000ca6:	4a13      	ldr	r2, [pc, #76]	@ (8000cf4 <MX_I2C2_Init+0x54>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000cac:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <MX_I2C2_Init+0x58>)
 8000cae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000cbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cc2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_I2C2_Init+0x50>)
 8000cde:	f001 fb69 	bl	80023b4 <HAL_I2C_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ce8:	f000 f9be 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000104 	.word	0x20000104
 8000cf4:	40005800 	.word	0x40005800
 8000cf8:	000186a0 	.word	0x000186a0

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	@ 0x38
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]
 8000d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d36:	228f      	movs	r2, #143	@ 0x8f
 8000d38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000d40:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d42:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d54:	4823      	ldr	r0, [pc, #140]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d56:	f003 f827 	bl	8003da8 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d60:	f000 f982 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481c      	ldr	r0, [pc, #112]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d72:	f003 fc15 	bl	80045a0 <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d7c:	f000 f974 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d80:	4818      	ldr	r0, [pc, #96]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d82:	f003 f860 	bl	8003e46 <HAL_TIM_PWM_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d8c:	f000 f96c 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000da0:	f003 ffa2 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000daa:	f000 f95d 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	@ 0x60
 8000db0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000dc6:	f003 fb29 	bl	800441c <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000dd0:	f000 f94a 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd4:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000dd6:	f000 fa7f 	bl	80012d8 <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	@ 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000158 	.word	0x20000158

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	@ 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e20:	2247      	movs	r2, #71	@ 0x47
 8000e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 800-1;
 8000e2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e2c:	f240 321f 	movw	r2, #799	@ 0x31f
 8000e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3e:	4823      	ldr	r0, [pc, #140]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e40:	f002 ffb2 	bl	8003da8 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e4a:	f000 f90d 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481c      	ldr	r0, [pc, #112]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e5c:	f003 fba0 	bl	80045a0 <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e66:	f000 f8ff 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6a:	4818      	ldr	r0, [pc, #96]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e6c:	f002 ffeb 	bl	8003e46 <HAL_TIM_PWM_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e76:	f000 f8f7 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	4619      	mov	r1, r3
 8000e88:	4810      	ldr	r0, [pc, #64]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000e8a:	f003 ff2d 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e94:	f000 f8e8 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e98:	2360      	movs	r3, #96	@ 0x60
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000eb0:	f003 fab4 	bl	800441c <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000eba:	f000 f8d5 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ebe:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <MX_TIM3_Init+0xe4>)
 8000ec0:	f000 fa0a 	bl	80012d8 <HAL_TIM_MspPostInit>

}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	@ 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200001a0 	.word	0x200001a0
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_USART1_UART_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f0c:	f003 ff5c 	bl	8004dc8 <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f16:	f000 f8a7 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001e8 	.word	0x200001e8
 8000f24:	40013800 	.word	0x40013800

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a3c      	ldr	r2, [pc, #240]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a36      	ldr	r2, [pc, #216]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b34      	ldr	r3, [pc, #208]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b31      	ldr	r3, [pc, #196]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a30      	ldr	r2, [pc, #192]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b2e      	ldr	r3, [pc, #184]	@ (8001034 <MX_GPIO_Init+0x10c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2130      	movs	r1, #48	@ 0x30
 8000f88:	482b      	ldr	r0, [pc, #172]	@ (8001038 <MX_GPIO_Init+0x110>)
 8000f8a:	f001 f9e2 	bl	8002352 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2108      	movs	r1, #8
 8000f92:	482a      	ldr	r0, [pc, #168]	@ (800103c <MX_GPIO_Init+0x114>)
 8000f94:	f001 f9dd 	bl	8002352 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4823      	ldr	r0, [pc, #140]	@ (8001038 <MX_GPIO_Init+0x110>)
 8000fac:	f001 f836 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fb0:	2330      	movs	r3, #48	@ 0x30
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481c      	ldr	r0, [pc, #112]	@ (8001038 <MX_GPIO_Init+0x110>)
 8000fc8:	f001 f828 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4815      	ldr	r0, [pc, #84]	@ (8001038 <MX_GPIO_Init+0x110>)
 8000fe2:	f001 f81b 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480f      	ldr	r0, [pc, #60]	@ (800103c <MX_GPIO_Init+0x114>)
 8000ffe:	f001 f80d 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001002:	2320      	movs	r3, #32
 8001004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_GPIO_Init+0x118>)
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4619      	mov	r1, r3
 8001014:	4809      	ldr	r0, [pc, #36]	@ (800103c <MX_GPIO_Init+0x114>)
 8001016:	f001 f801 	bl	800201c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2017      	movs	r0, #23
 8001020:	f000 ff13 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001024:	2017      	movs	r0, #23
 8001026:	f000 ff2c 	bl	8001e82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
 8001038:	40010800 	.word	0x40010800
 800103c:	40010c00 	.word	0x40010c00
 8001040:	10210000 	.word	0x10210000

08001044 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == BUTTON) // Kiểm tra ngắt từ nút nhấn
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	2b20      	cmp	r3, #32
 8001052:	d102      	bne.n	800105a <HAL_GPIO_EXTI_Callback+0x16>
    {
    	motor_state = 1;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x20>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
//        	//StepperMotor_Start();
//        	StepperMotor_Stop();
//
//        }
    }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	20000006 	.word	0x20000006

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <Error_Handler+0x8>

08001074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <HAL_MspInit+0x5c>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_MspInit+0x60>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_MspInit+0x60>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a18      	ldr	r2, [pc, #96]	@ (8001154 <HAL_ADC_MspInit+0x7c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d129      	bne.n	800114c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f8:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a16      	ldr	r2, [pc, #88]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <HAL_ADC_MspInit+0x80>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112c:	2303      	movs	r3, #3
 800112e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4619      	mov	r1, r3
 8001136:	4809      	ldr	r0, [pc, #36]	@ (800115c <HAL_ADC_MspInit+0x84>)
 8001138:	f000 ff70 	bl	800201c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2012      	movs	r0, #18
 8001142:	f000 fe82 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001146:	2012      	movs	r0, #18
 8001148:	f000 fe9b 	bl	8001e82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40012400 	.word	0x40012400
 8001158:	40021000 	.word	0x40021000
 800115c:	40010800 	.word	0x40010800

08001160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a32      	ldr	r2, [pc, #200]	@ (8001244 <HAL_I2C_MspInit+0xe4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d133      	bne.n	80011e8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a30      	ldr	r2, [pc, #192]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001198:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	4827      	ldr	r0, [pc, #156]	@ (800124c <HAL_I2C_MspInit+0xec>)
 80011ae:	f000 ff35 	bl	800201c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011b2:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <HAL_I2C_MspInit+0xf0>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ba:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011c8:	4a21      	ldr	r2, [pc, #132]	@ (8001250 <HAL_I2C_MspInit+0xf0>)
 80011ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011cc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 80011d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011e6:	e029      	b.n	800123c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <HAL_I2C_MspInit+0xf4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d124      	bne.n	800123c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800120a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	480b      	ldr	r0, [pc, #44]	@ (800124c <HAL_I2C_MspInit+0xec>)
 8001220:	f000 fefc 	bl	800201c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 800122a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800122e:	61d3      	str	r3, [r2, #28]
 8001230:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <HAL_I2C_MspInit+0xe8>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	@ 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40005400 	.word	0x40005400
 8001248:	40021000 	.word	0x40021000
 800124c:	40010c00 	.word	0x40010c00
 8001250:	40010000 	.word	0x40010000
 8001254:	40005800 	.word	0x40005800

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001268:	d114      	bne.n	8001294 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	201c      	movs	r0, #28
 8001288:	f000 fddf 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800128c:	201c      	movs	r0, #28
 800128e:	f000 fdf8 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001292:	e018      	b.n	80012c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_TIM_Base_MspInit+0x7c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d113      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a0b      	ldr	r2, [pc, #44]	@ (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201d      	movs	r0, #29
 80012bc:	f000 fdc5 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012c0:	201d      	movs	r0, #29
 80012c2:	f000 fdde 	bl	8001e82 <HAL_NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40000400 	.word	0x40000400

080012d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f6:	d118      	bne.n	800132a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <HAL_TIM_MspPostInit+0x94>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a1b      	ldr	r2, [pc, #108]	@ (800136c <HAL_TIM_MspPostInit+0x94>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b19      	ldr	r3, [pc, #100]	@ (800136c <HAL_TIM_MspPostInit+0x94>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2302      	movs	r3, #2
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4813      	ldr	r0, [pc, #76]	@ (8001370 <HAL_TIM_MspPostInit+0x98>)
 8001324:	f000 fe7a 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001328:	e01c      	b.n	8001364 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a11      	ldr	r2, [pc, #68]	@ (8001374 <HAL_TIM_MspPostInit+0x9c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d117      	bne.n	8001364 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_TIM_MspPostInit+0x94>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a0c      	ldr	r2, [pc, #48]	@ (800136c <HAL_TIM_MspPostInit+0x94>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_TIM_MspPostInit+0x94>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800134c:	2340      	movs	r3, #64	@ 0x40
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2302      	movs	r3, #2
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4804      	ldr	r0, [pc, #16]	@ (8001370 <HAL_TIM_MspPostInit+0x98>)
 8001360:	f000 fe5c 	bl	800201c <HAL_GPIO_Init>
}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800
 8001374:	40000400 	.word	0x40000400

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a26      	ldr	r2, [pc, #152]	@ (800142c <HAL_UART_MspInit+0xb4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d145      	bne.n	8001424 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001398:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <HAL_UART_MspInit+0xb8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a24      	ldr	r2, [pc, #144]	@ (8001430 <HAL_UART_MspInit+0xb8>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <HAL_UART_MspInit+0xb8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <HAL_UART_MspInit+0xb8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001430 <HAL_UART_MspInit+0xb8>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <HAL_UART_MspInit+0xb8>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c8:	2340      	movs	r3, #64	@ 0x40
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4816      	ldr	r0, [pc, #88]	@ (8001434 <HAL_UART_MspInit+0xbc>)
 80013dc:	f000 fe1e 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4810      	ldr	r0, [pc, #64]	@ (8001434 <HAL_UART_MspInit+0xbc>)
 80013f4:	f000 fe12 	bl	800201c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <HAL_UART_MspInit+0xc0>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <HAL_UART_MspInit+0xc0>)
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2101      	movs	r1, #1
 8001418:	2025      	movs	r0, #37	@ 0x25
 800141a:	f000 fd16 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800141e:	2025      	movs	r0, #37	@ 0x25
 8001420:	f000 fd2f 	bl	8001e82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013800 	.word	0x40013800
 8001430:	40021000 	.word	0x40021000
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40010000 	.word	0x40010000

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <NMI_Handler+0x4>

08001444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <MemManage_Handler+0x4>

08001454 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <UsageFault_Handler+0x4>

08001464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f8da 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <ADC1_2_IRQHandler+0x10>)
 800149a:	f000 f9eb 	bl	8001874 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000080 	.word	0x20000080

080014a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80014ac:	2020      	movs	r0, #32
 80014ae:	f000 ff69 	bl	8002384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <TIM2_IRQHandler+0x10>)
 80014be:	f002 febd 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000158 	.word	0x20000158

080014cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <TIM3_IRQHandler+0x10>)
 80014d2:	f002 feb3 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200001a0 	.word	0x200001a0

080014e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <USART1_IRQHandler+0x10>)
 80014e6:	f003 fd4b 	bl	8004f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200001e8 	.word	0x200001e8

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f004 fac2 	bl	8005aac <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20005000 	.word	0x20005000
 8001554:	00000400 	.word	0x00000400
 8001558:	20000308 	.word	0x20000308
 800155c:	20000458 	.word	0x20000458

08001560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff fff8 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001572:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001574:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001588:	4c09      	ldr	r4, [pc, #36]	@ (80015b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f004 fa8f 	bl	8005ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159a:	f7ff fa3d 	bl	8000a18 <main>
  bx lr
 800159e:	4770      	bx	lr
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80015a8:	080064ac 	.word	0x080064ac
  ldr r2, =_sbss
 80015ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80015b0:	20000458 	.word	0x20000458

080015b4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <CAN1_RX1_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_Init+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_Init+0x28>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 fc33 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fd4e 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fc4b 	bl	8001e9e <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 fc13 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000008 	.word	0x20000008
 800163c:	20000010 	.word	0x20000010
 8001640:	2000000c 	.word	0x2000000c

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	@ (8001664 <HAL_IncTick+0x20>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000010 	.word	0x20000010
 8001664:	2000030c 	.word	0x2000030c

08001668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	@ (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	2000030c 	.word	0x2000030c

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fff0 	bl	8001668 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffe0 	bl	8001668 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000010 	.word	0x20000010

080016c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0be      	b.n	8001864 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fce8 	bl	80010d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fa7d 	bl	8001c08 <ADC_ConversionStop_Disable>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 8099 	bne.w	8001852 <HAL_ADC_Init+0x18e>
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8095 	bne.w	8001852 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	f043 0202 	orr.w	r2, r3, #2
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7b1b      	ldrb	r3, [r3, #12]
 800174a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800174c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800175c:	d003      	beq.n	8001766 <HAL_ADC_Init+0xa2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <HAL_ADC_Init+0xa8>
 8001766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176a:	e000      	b.n	800176e <HAL_ADC_Init+0xaa>
 800176c:	2300      	movs	r3, #0
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7d1b      	ldrb	r3, [r3, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d119      	bne.n	80017b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b1b      	ldrb	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	3b01      	subs	r3, #1
 800178a:	035a      	lsls	r2, r3, #13
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e00b      	b.n	80017b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	f043 0220 	orr.w	r2, r3, #32
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	4b28      	ldr	r3, [pc, #160]	@ (800186c <HAL_ADC_Init+0x1a8>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017e0:	d003      	beq.n	80017ea <HAL_ADC_Init+0x126>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d104      	bne.n	80017f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	051b      	lsls	r3, r3, #20
 80017f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <HAL_ADC_Init+0x1ac>)
 8001810:	4013      	ands	r3, r2
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d10b      	bne.n	8001830 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800182e:	e018      	b.n	8001862 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	f023 0312 	bic.w	r3, r3, #18
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001850:	e007      	b.n	8001862 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	7dfb      	ldrb	r3, [r7, #23]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	ffe1f7fd 	.word	0xffe1f7fd
 8001870:	ff1f0efe 	.word	0xff1f0efe

08001874 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b00      	cmp	r3, #0
 8001894:	d03e      	beq.n	8001914 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d039      	beq.n	8001914 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018c2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018c6:	d11d      	bne.n	8001904 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d119      	bne.n	8001904 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0220 	bic.w	r2, r2, #32
 80018de:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f874 	bl	80019f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f06f 0212 	mvn.w	r2, #18
 8001912:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	d04d      	beq.n	80019ba <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d048      	beq.n	80019ba <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800194a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800194e:	d012      	beq.n	8001976 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800195a:	2b00      	cmp	r3, #0
 800195c:	d125      	bne.n	80019aa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001968:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800196c:	d11d      	bne.n	80019aa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001972:	2b00      	cmp	r3, #0
 8001974:	d119      	bne.n	80019aa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001984:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f96d 	bl	8001c8a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f06f 020c 	mvn.w	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d012      	beq.n	80019ea <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f812 	bl	8001a04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0201 	mvn.w	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x20>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e0dc      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x1da>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	d81c      	bhi.n	8001a82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b05      	subs	r3, #5
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4019      	ands	r1, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b05      	subs	r3, #5
 8001a74:	fa00 f203 	lsl.w	r2, r0, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a80:	e03c      	b.n	8001afc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d81c      	bhi.n	8001ac4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b23      	subs	r3, #35	@ 0x23
 8001a9c:	221f      	movs	r2, #31
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4019      	ands	r1, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b23      	subs	r3, #35	@ 0x23
 8001ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ac2:	e01b      	b.n	8001afc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b41      	subs	r3, #65	@ 0x41
 8001ad6:	221f      	movs	r2, #31
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4019      	ands	r1, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b41      	subs	r3, #65	@ 0x41
 8001af0:	fa00 f203 	lsl.w	r2, r0, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d91c      	bls.n	8001b3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68d9      	ldr	r1, [r3, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	3b1e      	subs	r3, #30
 8001b16:	2207      	movs	r2, #7
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4019      	ands	r1, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6898      	ldr	r0, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b1e      	subs	r3, #30
 8001b30:	fa00 f203 	lsl.w	r2, r0, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	e019      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6919      	ldr	r1, [r3, #16]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	2207      	movs	r2, #7
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4019      	ands	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6898      	ldr	r0, [r3, #8]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d003      	beq.n	8001b82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b7e:	2b11      	cmp	r3, #17
 8001b80:	d132      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <HAL_ADC_ConfigChannel+0x1e4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d125      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d126      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ba8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d11a      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a13      	ldr	r2, [pc, #76]	@ (8001c04 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0c9a      	lsrs	r2, r3, #18
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x1b2>
 8001bd6:	e007      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	f043 0220 	orr.w	r2, r3, #32
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40012400 	.word	0x40012400
 8001c00:	20000008 	.word	0x20000008
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d12e      	bne.n	8001c80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c32:	f7ff fd19 	bl	8001668 <HAL_GetTick>
 8001c36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c38:	e01b      	b.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c3a:	f7ff fd15 	bl	8001668 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d914      	bls.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10d      	bne.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e007      	b.n	8001c82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d0dc      	beq.n	8001c3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4906      	ldr	r1, [pc, #24]	@ (8001d34 <__NVIC_EnableIRQ+0x34>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff90 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff2d 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff42 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff90 	bl	8001d8c <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5f 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff35 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d008      	beq.n	8001ee0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e020      	b.n	8001f22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 020e 	bic.w	r2, r2, #14
 8001eee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d005      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2204      	movs	r2, #4
 8001f48:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e051      	b.n	8001ff4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 020e 	bic.w	r2, r2, #14
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a22      	ldr	r2, [pc, #136]	@ (8002000 <HAL_DMA_Abort_IT+0xd4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d029      	beq.n	8001fce <HAL_DMA_Abort_IT+0xa2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a21      	ldr	r2, [pc, #132]	@ (8002004 <HAL_DMA_Abort_IT+0xd8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d022      	beq.n	8001fca <HAL_DMA_Abort_IT+0x9e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1f      	ldr	r2, [pc, #124]	@ (8002008 <HAL_DMA_Abort_IT+0xdc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0x98>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <HAL_DMA_Abort_IT+0xe0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d012      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x92>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <HAL_DMA_Abort_IT+0xe4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x8c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <HAL_DMA_Abort_IT+0xe8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d102      	bne.n	8001fb2 <HAL_DMA_Abort_IT+0x86>
 8001fac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fb0:	e00e      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb6:	e00b      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fbc:	e008      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc2:	e005      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc8:	e002      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fca:	2310      	movs	r3, #16
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xa4>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <HAL_DMA_Abort_IT+0xec>)
 8001fd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
    } 
  }
  return status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020008 	.word	0x40020008
 8002004:	4002001c 	.word	0x4002001c
 8002008:	40020030 	.word	0x40020030
 800200c:	40020044 	.word	0x40020044
 8002010:	40020058 	.word	0x40020058
 8002014:	4002006c 	.word	0x4002006c
 8002018:	40020000 	.word	0x40020000

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b08b      	sub	sp, #44	@ 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e169      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8158 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a9a      	ldr	r2, [pc, #616]	@ (80022bc <HAL_GPIO_Init+0x2a0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d05e      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002058:	4a98      	ldr	r2, [pc, #608]	@ (80022bc <HAL_GPIO_Init+0x2a0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d875      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800205e:	4a98      	ldr	r2, [pc, #608]	@ (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d058      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002064:	4a96      	ldr	r2, [pc, #600]	@ (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d86f      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800206a:	4a96      	ldr	r2, [pc, #600]	@ (80022c4 <HAL_GPIO_Init+0x2a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d052      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002070:	4a94      	ldr	r2, [pc, #592]	@ (80022c4 <HAL_GPIO_Init+0x2a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d869      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002076:	4a94      	ldr	r2, [pc, #592]	@ (80022c8 <HAL_GPIO_Init+0x2ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04c      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 800207c:	4a92      	ldr	r2, [pc, #584]	@ (80022c8 <HAL_GPIO_Init+0x2ac>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d863      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002082:	4a92      	ldr	r2, [pc, #584]	@ (80022cc <HAL_GPIO_Init+0x2b0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d046      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002088:	4a90      	ldr	r2, [pc, #576]	@ (80022cc <HAL_GPIO_Init+0x2b0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d85d      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d82a      	bhi.n	80020e8 <HAL_GPIO_Init+0xcc>
 8002092:	2b12      	cmp	r3, #18
 8002094:	d859      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002096:	a201      	add	r2, pc, #4	@ (adr r2, 800209c <HAL_GPIO_Init+0x80>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	08002117 	.word	0x08002117
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	08002103 	.word	0x08002103
 80020a8:	08002145 	.word	0x08002145
 80020ac:	0800214b 	.word	0x0800214b
 80020b0:	0800214b 	.word	0x0800214b
 80020b4:	0800214b 	.word	0x0800214b
 80020b8:	0800214b 	.word	0x0800214b
 80020bc:	0800214b 	.word	0x0800214b
 80020c0:	0800214b 	.word	0x0800214b
 80020c4:	0800214b 	.word	0x0800214b
 80020c8:	0800214b 	.word	0x0800214b
 80020cc:	0800214b 	.word	0x0800214b
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	0800214b 	.word	0x0800214b
 80020d8:	0800214b 	.word	0x0800214b
 80020dc:	0800214b 	.word	0x0800214b
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	0800210d 	.word	0x0800210d
 80020e8:	4a79      	ldr	r2, [pc, #484]	@ (80022d0 <HAL_GPIO_Init+0x2b4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ee:	e02c      	b.n	800214a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e029      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e024      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	3308      	adds	r3, #8
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e01f      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	330c      	adds	r3, #12
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e01a      	b.n	800214c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211e:	2304      	movs	r3, #4
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e013      	b.n	800214c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800212c:	2308      	movs	r3, #8
 800212e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	611a      	str	r2, [r3, #16]
          break;
 8002136:	e009      	b.n	800214c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002138:	2308      	movs	r3, #8
 800213a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	615a      	str	r2, [r3, #20]
          break;
 8002142:	e003      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x130>
          break;
 800214a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2bff      	cmp	r3, #255	@ 0xff
 8002150:	d801      	bhi.n	8002156 <HAL_GPIO_Init+0x13a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	e001      	b.n	800215a <HAL_GPIO_Init+0x13e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2bff      	cmp	r3, #255	@ 0xff
 8002160:	d802      	bhi.n	8002168 <HAL_GPIO_Init+0x14c>
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x152>
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	3b08      	subs	r3, #8
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	210f      	movs	r1, #15
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80b1 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800219c:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b4:	4a48      	ldr	r2, [pc, #288]	@ (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	@ (80022dc <HAL_GPIO_Init+0x2c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_Init+0x1ec>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	@ (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1e8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	@ (80022e4 <HAL_GPIO_Init+0x2c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1e4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <HAL_GPIO_Init+0x2cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1e0>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002208:	2300      	movs	r3, #0
 800220a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221a:	492f      	ldr	r1, [pc, #188]	@ (80022d8 <HAL_GPIO_Init+0x2bc>)
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	492c      	ldr	r1, [pc, #176]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002242:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4928      	ldr	r1, [pc, #160]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800224c:	4013      	ands	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800225c:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4922      	ldr	r1, [pc, #136]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	491e      	ldr	r1, [pc, #120]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4918      	ldr	r1, [pc, #96]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002292:	4b16      	ldr	r3, [pc, #88]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4914      	ldr	r1, [pc, #80]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d021      	beq.n	80022f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	490e      	ldr	r1, [pc, #56]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e021      	b.n	80022fe <HAL_GPIO_Init+0x2e2>
 80022ba:	bf00      	nop
 80022bc:	10320000 	.word	0x10320000
 80022c0:	10310000 	.word	0x10310000
 80022c4:	10220000 	.word	0x10220000
 80022c8:	10210000 	.word	0x10210000
 80022cc:	10120000 	.word	0x10120000
 80022d0:	10110000 	.word	0x10110000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4909      	ldr	r1, [pc, #36]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f ae8e 	bne.w	8002030 <HAL_GPIO_Init+0x14>
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	372c      	adds	r7, #44	@ 0x2c
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e001      	b.n	8002346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	807b      	strh	r3, [r7, #2]
 800235e:	4613      	mov	r3, r2
 8002360:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002362:	787b      	ldrb	r3, [r7, #1]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002368:	887a      	ldrh	r2, [r7, #2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800236e:	e003      	b.n	8002378 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	041a      	lsls	r2, r3, #16
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	611a      	str	r2, [r3, #16]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
	...

08002384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800238e:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800239a:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fe4e 	bl	8001044 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40010400 	.word	0x40010400

080023b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e12b      	b.n	800261e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fec0 	bl	8001160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	@ 0x24
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002418:	f001 fbca 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 800241c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4a81      	ldr	r2, [pc, #516]	@ (8002628 <HAL_I2C_Init+0x274>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d807      	bhi.n	8002438 <HAL_I2C_Init+0x84>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4a80      	ldr	r2, [pc, #512]	@ (800262c <HAL_I2C_Init+0x278>)
 800242c:	4293      	cmp	r3, r2
 800242e:	bf94      	ite	ls
 8002430:	2301      	movls	r3, #1
 8002432:	2300      	movhi	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e006      	b.n	8002446 <HAL_I2C_Init+0x92>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a7d      	ldr	r2, [pc, #500]	@ (8002630 <HAL_I2C_Init+0x27c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	bf94      	ite	ls
 8002440:	2301      	movls	r3, #1
 8002442:	2300      	movhi	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0e7      	b.n	800261e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4a78      	ldr	r2, [pc, #480]	@ (8002634 <HAL_I2C_Init+0x280>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0c9b      	lsrs	r3, r3, #18
 8002458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a6a      	ldr	r2, [pc, #424]	@ (8002628 <HAL_I2C_Init+0x274>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d802      	bhi.n	8002488 <HAL_I2C_Init+0xd4>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3301      	adds	r3, #1
 8002486:	e009      	b.n	800249c <HAL_I2C_Init+0xe8>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	4a69      	ldr	r2, [pc, #420]	@ (8002638 <HAL_I2C_Init+0x284>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	3301      	adds	r3, #1
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	495c      	ldr	r1, [pc, #368]	@ (8002628 <HAL_I2C_Init+0x274>)
 80024b8:	428b      	cmp	r3, r1
 80024ba:	d819      	bhi.n	80024f0 <HAL_I2C_Init+0x13c>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e59      	subs	r1, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024d0:	400b      	ands	r3, r1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_I2C_Init+0x138>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1e59      	subs	r1, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ea:	e051      	b.n	8002590 <HAL_I2C_Init+0x1dc>
 80024ec:	2304      	movs	r3, #4
 80024ee:	e04f      	b.n	8002590 <HAL_I2C_Init+0x1dc>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <HAL_I2C_Init+0x168>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1e58      	subs	r0, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	440b      	add	r3, r1
 8002506:	fbb0 f3f3 	udiv	r3, r0, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e012      	b.n	8002542 <HAL_I2C_Init+0x18e>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e58      	subs	r0, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	0099      	lsls	r1, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Init+0x196>
 8002546:	2301      	movs	r3, #1
 8002548:	e022      	b.n	8002590 <HAL_I2C_Init+0x1dc>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10e      	bne.n	8002570 <HAL_I2C_Init+0x1bc>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1e58      	subs	r0, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	440b      	add	r3, r1
 8002560:	fbb0 f3f3 	udiv	r3, r0, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800256e:	e00f      	b.n	8002590 <HAL_I2C_Init+0x1dc>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e58      	subs	r0, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	0099      	lsls	r1, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	fbb0 f3f3 	udiv	r3, r0, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	6809      	ldr	r1, [r1, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6911      	ldr	r1, [r2, #16]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68d2      	ldr	r2, [r2, #12]
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	000186a0 	.word	0x000186a0
 800262c:	001e847f 	.word	0x001e847f
 8002630:	003d08ff 	.word	0x003d08ff
 8002634:	431bde83 	.word	0x431bde83
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	461a      	mov	r2, r3
 8002648:	460b      	mov	r3, r1
 800264a:	817b      	strh	r3, [r7, #10]
 800264c:	4613      	mov	r3, r2
 800264e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff f80a 	bl	8001668 <HAL_GetTick>
 8002654:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b20      	cmp	r3, #32
 8002660:	f040 80e0 	bne.w	8002824 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2319      	movs	r3, #25
 800266a:	2201      	movs	r2, #1
 800266c:	4970      	ldr	r1, [pc, #448]	@ (8002830 <HAL_I2C_Master_Transmit+0x1f4>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fc9e 	bl	8002fb0 <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	e0d3      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_I2C_Master_Transmit+0x50>
 8002688:	2302      	movs	r3, #2
 800268a:	e0cc      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d007      	beq.n	80026b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2221      	movs	r2, #33	@ 0x21
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2210      	movs	r2, #16
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a50      	ldr	r2, [pc, #320]	@ (8002834 <HAL_I2C_Master_Transmit+0x1f8>)
 80026f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026f4:	8979      	ldrh	r1, [r7, #10]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fb08 	bl	8002d10 <I2C_MasterRequestWrite>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e08d      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002720:	e066      	b.n	80027f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	6a39      	ldr	r1, [r7, #32]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fd5c 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	2b04      	cmp	r3, #4
 8002738:	d107      	bne.n	800274a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002748:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06b      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11b      	bne.n	80027c4 <HAL_I2C_Master_Transmit+0x188>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	6a39      	ldr	r1, [r7, #32]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fd53 	bl	8003274 <I2C_WaitOnBTFFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d107      	bne.n	80027ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e01a      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d194      	bne.n	8002722 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	00100002 	.word	0x00100002
 8002834:	ffff0000 	.word	0xffff0000

08002838 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	@ 0x30
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
 8002848:	4613      	mov	r3, r2
 800284a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7fe ff0a 	bl	8001668 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	f040 824b 	bne.w	8002cfa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2319      	movs	r3, #25
 800286a:	2201      	movs	r2, #1
 800286c:	497f      	ldr	r1, [pc, #508]	@ (8002a6c <HAL_I2C_Master_Receive+0x234>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fb9e 	bl	8002fb0 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800287a:	2302      	movs	r3, #2
 800287c:	e23e      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_I2C_Master_Receive+0x54>
 8002888:	2302      	movs	r3, #2
 800288a:	e237      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d007      	beq.n	80028b2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2222      	movs	r2, #34	@ 0x22
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2210      	movs	r2, #16
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	893a      	ldrh	r2, [r7, #8]
 80028e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002a70 <HAL_I2C_Master_Receive+0x238>)
 80028f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fa8a 	bl	8002e14 <I2C_MasterRequestRead>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1f8      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d113      	bne.n	800293a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e1cc      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293e:	2b01      	cmp	r3, #1
 8002940:	d11e      	bne.n	8002980 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002950:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002952:	b672      	cpsid	i
}
 8002954:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800297a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800297c:	b662      	cpsie	i
}
 800297e:	e035      	b.n	80029ec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002984:	2b02      	cmp	r3, #2
 8002986:	d11e      	bne.n	80029c6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002996:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029c2:	b662      	cpsie	i
}
 80029c4:	e012      	b.n	80029ec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029ec:	e172      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	f200 811f 	bhi.w	8002c36 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d123      	bne.n	8002a48 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fc7d 	bl	8003304 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e173      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a46:	e145      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d152      	bne.n	8002af6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	2200      	movs	r2, #0
 8002a58:	4906      	ldr	r1, [pc, #24]	@ (8002a74 <HAL_I2C_Master_Receive+0x23c>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 faa8 	bl	8002fb0 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e148      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000
 8002a74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a78:	b672      	cpsid	i
}
 8002a7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002abe:	b662      	cpsie	i
}
 8002ac0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002af4:	e0ee      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	2200      	movs	r2, #0
 8002afe:	4981      	ldr	r1, [pc, #516]	@ (8002d04 <HAL_I2C_Master_Receive+0x4cc>)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fa55 	bl	8002fb0 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0f5      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b56:	4b6c      	ldr	r3, [pc, #432]	@ (8002d08 <HAL_I2C_Master_Receive+0x4d0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	08db      	lsrs	r3, r3, #3
 8002b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8002d0c <HAL_I2C_Master_Receive+0x4d4>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0a1a      	lsrs	r2, r3, #8
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00da      	lsls	r2, r3, #3
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f043 0220 	orr.w	r2, r3, #32
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b9e:	b662      	cpsie	i
}
 8002ba0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0a6      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d1d9      	bne.n	8002b70 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfe:	b662      	cpsie	i
}
 8002c00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c34:	e04e      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fb62 	bl	8003304 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e058      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d124      	bne.n	8002cd4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f ae88 	bne.w	80029ee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3728      	adds	r7, #40	@ 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	00010004 	.word	0x00010004
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	14f8b589 	.word	0x14f8b589

08002d10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d006      	beq.n	8002d3a <I2C_MasterRequestWrite+0x2a>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d003      	beq.n	8002d3a <I2C_MasterRequestWrite+0x2a>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d38:	d108      	bne.n	8002d4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e00b      	b.n	8002d64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	2b12      	cmp	r3, #18
 8002d52:	d107      	bne.n	8002d64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f91d 	bl	8002fb0 <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d8a:	d103      	bne.n	8002d94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e035      	b.n	8002e04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002da0:	d108      	bne.n	8002db4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002db0:	611a      	str	r2, [r3, #16]
 8002db2:	e01b      	b.n	8002dec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db4:	897b      	ldrh	r3, [r7, #10]
 8002db6:	11db      	asrs	r3, r3, #7
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f003 0306 	and.w	r3, r3, #6
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f063 030f 	orn	r3, r3, #15
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	490e      	ldr	r1, [pc, #56]	@ (8002e0c <I2C_MasterRequestWrite+0xfc>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f966 	bl	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e010      	b.n	8002e04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002de2:	897b      	ldrh	r3, [r7, #10]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4907      	ldr	r1, [pc, #28]	@ (8002e10 <I2C_MasterRequestWrite+0x100>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f956 	bl	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	00010008 	.word	0x00010008
 8002e10:	00010002 	.word	0x00010002

08002e14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	460b      	mov	r3, r1
 8002e22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d006      	beq.n	8002e4e <I2C_MasterRequestRead+0x3a>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d003      	beq.n	8002e4e <I2C_MasterRequestRead+0x3a>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e4c:	d108      	bne.n	8002e60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e00b      	b.n	8002e78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	2b11      	cmp	r3, #17
 8002e66:	d107      	bne.n	8002e78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f893 	bl	8002fb0 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e9e:	d103      	bne.n	8002ea8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e079      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eb4:	d108      	bne.n	8002ec8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e05f      	b.n	8002f88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	11db      	asrs	r3, r3, #7
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 0306 	and.w	r3, r3, #6
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f063 030f 	orn	r3, r3, #15
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4930      	ldr	r1, [pc, #192]	@ (8002fa8 <I2C_MasterRequestRead+0x194>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f8dc 	bl	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e054      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4929      	ldr	r1, [pc, #164]	@ (8002fac <I2C_MasterRequestRead+0x198>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f8cc 	bl	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e044      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f831 	bl	8002fb0 <I2C_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f62:	d103      	bne.n	8002f6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e017      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f70:	897b      	ldrh	r3, [r7, #10]
 8002f72:	11db      	asrs	r3, r3, #7
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0306 	and.w	r3, r3, #6
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f063 030e 	orn	r3, r3, #14
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4907      	ldr	r1, [pc, #28]	@ (8002fac <I2C_MasterRequestRead+0x198>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f888 	bl	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	00010008 	.word	0x00010008
 8002fac:	00010002 	.word	0x00010002

08002fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc0:	e048      	b.n	8003054 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d044      	beq.n	8003054 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fca:	f7fe fb4d 	bl	8001668 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d302      	bcc.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d139      	bne.n	8003054 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10d      	bne.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	e00c      	b.n	8003020 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	43da      	mvns	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4013      	ands	r3, r2
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	429a      	cmp	r2, r3
 8003024:	d116      	bne.n	8003054 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e023      	b.n	800309c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d10d      	bne.n	800307a <I2C_WaitOnFlagUntilTimeout+0xca>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	43da      	mvns	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	e00c      	b.n	8003094 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	43da      	mvns	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4013      	ands	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	429a      	cmp	r2, r3
 8003098:	d093      	beq.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b2:	e071      	b.n	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c2:	d123      	bne.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f043 0204 	orr.w	r2, r3, #4
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e067      	b.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d041      	beq.n	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003114:	f7fe faa8 	bl	8001668 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	d302      	bcc.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d136      	bne.n	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10c      	bne.n	800314e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	43da      	mvns	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf14      	ite	ne
 8003146:	2301      	movne	r3, #1
 8003148:	2300      	moveq	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	e00b      	b.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	43da      	mvns	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e021      	b.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10c      	bne.n	80031bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	43da      	mvns	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e00b      	b.n	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f47f af6d 	bne.w	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f0:	e034      	b.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f8e3 	bl	80033be <I2C_IsAcknowledgeFailed>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e034      	b.n	800326c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d028      	beq.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fa2d 	bl	8001668 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11d      	bne.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322a:	2b80      	cmp	r3, #128	@ 0x80
 800322c:	d016      	beq.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003266:	2b80      	cmp	r3, #128	@ 0x80
 8003268:	d1c3      	bne.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003280:	e034      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f89b 	bl	80033be <I2C_IsAcknowledgeFailed>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e034      	b.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d028      	beq.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fe f9e5 	bl	8001668 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d11d      	bne.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d016      	beq.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e007      	b.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d1c3      	bne.n	8003282 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003310:	e049      	b.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b10      	cmp	r3, #16
 800331e:	d119      	bne.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0210 	mvn.w	r2, #16
 8003328:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e030      	b.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fe f988 	bl	8001668 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d11d      	bne.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003374:	2b40      	cmp	r3, #64	@ 0x40
 8003376:	d016      	beq.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b40      	cmp	r3, #64	@ 0x40
 80033b2:	d1ae      	bne.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d4:	d11b      	bne.n	800340e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	f043 0204 	orr.w	r2, r3, #4
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
	...

0800341c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e272      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8087 	beq.w	800354a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800343c:	4b92      	ldr	r3, [pc, #584]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b04      	cmp	r3, #4
 8003446:	d00c      	beq.n	8003462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003448:	4b8f      	ldr	r3, [pc, #572]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d112      	bne.n	800347a <HAL_RCC_OscConfig+0x5e>
 8003454:	4b8c      	ldr	r3, [pc, #560]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003460:	d10b      	bne.n	800347a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003462:	4b89      	ldr	r3, [pc, #548]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d06c      	beq.n	8003548 <HAL_RCC_OscConfig+0x12c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d168      	bne.n	8003548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e24c      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x76>
 8003484:	4b80      	ldr	r3, [pc, #512]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a7f      	ldr	r2, [pc, #508]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 800348a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	e02e      	b.n	80034f0 <HAL_RCC_OscConfig+0xd4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x98>
 800349a:	4b7b      	ldr	r3, [pc, #492]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a7a      	ldr	r2, [pc, #488]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b78      	ldr	r3, [pc, #480]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a77      	ldr	r2, [pc, #476]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e01d      	b.n	80034f0 <HAL_RCC_OscConfig+0xd4>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0xbc>
 80034be:	4b72      	ldr	r3, [pc, #456]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a71      	ldr	r2, [pc, #452]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0xd4>
 80034d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b68      	ldr	r3, [pc, #416]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a67      	ldr	r2, [pc, #412]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe f8b6 	bl	8001668 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe f8b2 	bl	8001668 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	@ 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e200      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b5d      	ldr	r3, [pc, #372]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0xe4>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe f8a2 	bl	8001668 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe f89e 	bl	8001668 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	@ 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e1ec      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	4b53      	ldr	r3, [pc, #332]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x10c>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d063      	beq.n	800361e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003556:	4b4c      	ldr	r3, [pc, #304]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003562:	4b49      	ldr	r3, [pc, #292]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b08      	cmp	r3, #8
 800356c:	d11c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x18c>
 800356e:	4b46      	ldr	r3, [pc, #280]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d116      	bne.n	80035a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357a:	4b43      	ldr	r3, [pc, #268]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_RCC_OscConfig+0x176>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e1c0      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003592:	4b3d      	ldr	r3, [pc, #244]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4939      	ldr	r1, [pc, #228]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	e03a      	b.n	800361e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d020      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b0:	4b36      	ldr	r3, [pc, #216]	@ (800368c <HAL_RCC_OscConfig+0x270>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7fe f857 	bl	8001668 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035be:	f7fe f853 	bl	8001668 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e1a1      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4927      	ldr	r1, [pc, #156]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
 80035f0:	e015      	b.n	800361e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b26      	ldr	r3, [pc, #152]	@ (800368c <HAL_RCC_OscConfig+0x270>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe f836 	bl	8001668 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003600:	f7fe f832 	bl	8001668 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e180      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d03a      	beq.n	80036a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d019      	beq.n	8003666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003632:	4b17      	ldr	r3, [pc, #92]	@ (8003690 <HAL_RCC_OscConfig+0x274>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003638:	f7fe f816 	bl	8001668 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003640:	f7fe f812 	bl	8001668 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e160      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <HAL_RCC_OscConfig+0x26c>)
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800365e:	2001      	movs	r0, #1
 8003660:	f000 face 	bl	8003c00 <RCC_Delay>
 8003664:	e01c      	b.n	80036a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003666:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <HAL_RCC_OscConfig+0x274>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366c:	f7fd fffc 	bl	8001668 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003672:	e00f      	b.n	8003694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003674:	f7fd fff8 	bl	8001668 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d908      	bls.n	8003694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e146      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	42420000 	.word	0x42420000
 8003690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	4b92      	ldr	r3, [pc, #584]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e9      	bne.n	8003674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a6 	beq.w	80037fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b2:	4b8b      	ldr	r3, [pc, #556]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10d      	bne.n	80036da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	4b88      	ldr	r3, [pc, #544]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	4a87      	ldr	r2, [pc, #540]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c8:	61d3      	str	r3, [r2, #28]
 80036ca:	4b85      	ldr	r3, [pc, #532]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036da:	4b82      	ldr	r3, [pc, #520]	@ (80038e4 <HAL_RCC_OscConfig+0x4c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d118      	bne.n	8003718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e6:	4b7f      	ldr	r3, [pc, #508]	@ (80038e4 <HAL_RCC_OscConfig+0x4c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a7e      	ldr	r2, [pc, #504]	@ (80038e4 <HAL_RCC_OscConfig+0x4c8>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f2:	f7fd ffb9 	bl	8001668 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fa:	f7fd ffb5 	bl	8001668 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b64      	cmp	r3, #100	@ 0x64
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e103      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	4b75      	ldr	r3, [pc, #468]	@ (80038e4 <HAL_RCC_OscConfig+0x4c8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x312>
 8003720:	4b6f      	ldr	r3, [pc, #444]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4a6e      	ldr	r2, [pc, #440]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6213      	str	r3, [r2, #32]
 800372c:	e02d      	b.n	800378a <HAL_RCC_OscConfig+0x36e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x334>
 8003736:	4b6a      	ldr	r3, [pc, #424]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4a69      	ldr	r2, [pc, #420]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6213      	str	r3, [r2, #32]
 8003742:	4b67      	ldr	r3, [pc, #412]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4a66      	ldr	r2, [pc, #408]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	6213      	str	r3, [r2, #32]
 800374e:	e01c      	b.n	800378a <HAL_RCC_OscConfig+0x36e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b05      	cmp	r3, #5
 8003756:	d10c      	bne.n	8003772 <HAL_RCC_OscConfig+0x356>
 8003758:	4b61      	ldr	r3, [pc, #388]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4a60      	ldr	r2, [pc, #384]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	6213      	str	r3, [r2, #32]
 8003764:	4b5e      	ldr	r3, [pc, #376]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a5d      	ldr	r2, [pc, #372]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6213      	str	r3, [r2, #32]
 8003770:	e00b      	b.n	800378a <HAL_RCC_OscConfig+0x36e>
 8003772:	4b5b      	ldr	r3, [pc, #364]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4a5a      	ldr	r2, [pc, #360]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	6213      	str	r3, [r2, #32]
 800377e:	4b58      	ldr	r3, [pc, #352]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4a57      	ldr	r2, [pc, #348]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	f023 0304 	bic.w	r3, r3, #4
 8003788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d015      	beq.n	80037be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003792:	f7fd ff69 	bl	8001668 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fd ff65 	bl	8001668 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0b1      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b0:	4b4b      	ldr	r3, [pc, #300]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ee      	beq.n	800379a <HAL_RCC_OscConfig+0x37e>
 80037bc:	e014      	b.n	80037e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7fd ff53 	bl	8001668 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd ff4f 	bl	8001668 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e09b      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037dc:	4b40      	ldr	r3, [pc, #256]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ee      	bne.n	80037c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d105      	bne.n	80037fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ee:	4b3c      	ldr	r3, [pc, #240]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4a3b      	ldr	r2, [pc, #236]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8087 	beq.w	8003912 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003804:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b08      	cmp	r3, #8
 800380e:	d061      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d146      	bne.n	80038a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003818:	4b33      	ldr	r3, [pc, #204]	@ (80038e8 <HAL_RCC_OscConfig+0x4cc>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7fd ff23 	bl	8001668 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fd ff1f 	bl	8001668 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e06d      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003838:	4b29      	ldr	r3, [pc, #164]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384c:	d108      	bne.n	8003860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800384e:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4921      	ldr	r1, [pc, #132]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003860:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a19      	ldr	r1, [r3, #32]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	430b      	orrs	r3, r1
 8003872:	491b      	ldr	r1, [pc, #108]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003878:	4b1b      	ldr	r3, [pc, #108]	@ (80038e8 <HAL_RCC_OscConfig+0x4cc>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fd fef3 	bl	8001668 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003886:	f7fd feef 	bl	8001668 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e03d      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x46a>
 80038a4:	e035      	b.n	8003912 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd fedc 	bl	8001668 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fd fed8 	bl	8001668 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e026      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x498>
 80038d2:	e01e      	b.n	8003912 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e019      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40007000 	.word	0x40007000
 80038e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038ec:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_RCC_OscConfig+0x500>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d106      	bne.n	800390e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d001      	beq.n	8003912 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000

08003920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0d0      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003934:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d910      	bls.n	8003964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b67      	ldr	r3, [pc, #412]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 0207 	bic.w	r2, r3, #7
 800394a:	4965      	ldr	r1, [pc, #404]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b63      	ldr	r3, [pc, #396]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b8      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397c:	4b59      	ldr	r3, [pc, #356]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a58      	ldr	r2, [pc, #352]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003986:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003994:	4b53      	ldr	r3, [pc, #332]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a52      	ldr	r2, [pc, #328]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800399e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	494d      	ldr	r1, [pc, #308]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d040      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d115      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	4b41      	ldr	r3, [pc, #260]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e073      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e06b      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fe:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4936      	ldr	r1, [pc, #216]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a10:	f7fd fe2a 	bl	8001668 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7fd fe26 	bl	8001668 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e053      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a40:	4b27      	ldr	r3, [pc, #156]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d210      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 0207 	bic.w	r2, r3, #7
 8003a56:	4922      	ldr	r1, [pc, #136]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e032      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4916      	ldr	r1, [pc, #88]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	490e      	ldr	r1, [pc, #56]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aae:	f000 f821 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490a      	ldr	r1, [pc, #40]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a09      	ldr	r2, [pc, #36]	@ (8003aec <HAL_RCC_ClockConfig+0x1cc>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_ClockConfig+0x1d0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fd88 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40022000 	.word	0x40022000
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	08006444 	.word	0x08006444
 8003aec:	20000008 	.word	0x20000008
 8003af0:	2000000c 	.word	0x2000000c

08003af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d002      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x30>
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x36>
 8003b22:	e027      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b26:	613b      	str	r3, [r7, #16]
      break;
 8003b28:	e027      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	0c9b      	lsrs	r3, r3, #18
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	4a17      	ldr	r2, [pc, #92]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b34:	5cd3      	ldrb	r3, [r2, r3]
 8003b36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d010      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b42:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	0c5b      	lsrs	r3, r3, #17
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	4a11      	ldr	r2, [pc, #68]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a0d      	ldr	r2, [pc, #52]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b56:	fb03 f202 	mul.w	r2, r3, r2
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e004      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a0c      	ldr	r2, [pc, #48]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b68:	fb02 f303 	mul.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	613b      	str	r3, [r7, #16]
      break;
 8003b72:	e002      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b76:	613b      	str	r3, [r7, #16]
      break;
 8003b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7a:	693b      	ldr	r3, [r7, #16]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	007a1200 	.word	0x007a1200
 8003b90:	0800645c 	.word	0x0800645c
 8003b94:	0800646c 	.word	0x0800646c
 8003b98:	003d0900 	.word	0x003d0900

08003b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b02      	ldr	r3, [pc, #8]	@ (8003bac <HAL_RCC_GetHCLKFreq+0x10>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	20000008 	.word	0x20000008

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb4:	f7ff fff2 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	@ (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08006454 	.word	0x08006454

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	f7ff ffde 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	0adb      	lsrs	r3, r3, #11
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	@ (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08006454 	.word	0x08006454

08003c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c08:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <RCC_Delay+0x34>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c38 <RCC_Delay+0x38>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	0a5b      	lsrs	r3, r3, #9
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c1c:	bf00      	nop
  }
  while (Delay --);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1e5a      	subs	r2, r3, #1
 8003c22:	60fa      	str	r2, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1f9      	bne.n	8003c1c <RCC_Delay+0x1c>
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	20000008 	.word	0x20000008
 8003c38:	10624dd3 	.word	0x10624dd3

08003c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d07d      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10d      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c68:	4b4c      	ldr	r3, [pc, #304]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	61d3      	str	r3, [r2, #28]
 8003c74:	4b49      	ldr	r3, [pc, #292]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c80:	2301      	movs	r3, #1
 8003c82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c84:	4b46      	ldr	r3, [pc, #280]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d118      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c90:	4b43      	ldr	r3, [pc, #268]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a42      	ldr	r2, [pc, #264]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9c:	f7fd fce4 	bl	8001668 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca4:	f7fd fce0 	bl	8001668 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	@ 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e06d      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cc2:	4b36      	ldr	r3, [pc, #216]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d02e      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d027      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cea:	4b2e      	ldr	r3, [pc, #184]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cf6:	4a29      	ldr	r2, [pc, #164]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d014      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fd fcaf 	bl	8001668 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fd fcab 	bl	8001668 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e036      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ee      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d30:	4b1a      	ldr	r3, [pc, #104]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4917      	ldr	r1, [pc, #92]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d48:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4a13      	ldr	r2, [pc, #76]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d60:	4b0e      	ldr	r3, [pc, #56]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	490b      	ldr	r1, [pc, #44]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d7e:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4904      	ldr	r1, [pc, #16]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40007000 	.word	0x40007000
 8003da4:	42420440 	.word	0x42420440

08003da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e041      	b.n	8003e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fa42 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f000 fcce 	bl	8004788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e041      	b.n	8003edc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f839 	bl	8003ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f000 fc7f 	bl	8004788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_TIM_PWM_Start_IT+0x28>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e022      	b.n	8003f66 <HAL_TIM_PWM_Start_IT+0x6e>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d109      	bne.n	8003f3a <HAL_TIM_PWM_Start_IT+0x42>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e015      	b.n	8003f66 <HAL_TIM_PWM_Start_IT+0x6e>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d109      	bne.n	8003f54 <HAL_TIM_PWM_Start_IT+0x5c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e008      	b.n	8003f66 <HAL_TIM_PWM_Start_IT+0x6e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0a9      	b.n	80040c2 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_PWM_Start_IT+0x86>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f7c:	e013      	b.n	8003fa6 <HAL_TIM_PWM_Start_IT+0xae>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_PWM_Start_IT+0x96>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f8c:	e00b      	b.n	8003fa6 <HAL_TIM_PWM_Start_IT+0xae>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_PWM_Start_IT+0xa6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f9c:	e003      	b.n	8003fa6 <HAL_TIM_PWM_Start_IT+0xae>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b0c      	cmp	r3, #12
 8003faa:	d841      	bhi.n	8004030 <HAL_TIM_PWM_Start_IT+0x138>
 8003fac:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fe9 	.word	0x08003fe9
 8003fb8:	08004031 	.word	0x08004031
 8003fbc:	08004031 	.word	0x08004031
 8003fc0:	08004031 	.word	0x08004031
 8003fc4:	08003ffb 	.word	0x08003ffb
 8003fc8:	08004031 	.word	0x08004031
 8003fcc:	08004031 	.word	0x08004031
 8003fd0:	08004031 	.word	0x08004031
 8003fd4:	0800400d 	.word	0x0800400d
 8003fd8:	08004031 	.word	0x08004031
 8003fdc:	08004031 	.word	0x08004031
 8003fe0:	08004031 	.word	0x08004031
 8003fe4:	0800401f 	.word	0x0800401f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0202 	orr.w	r2, r2, #2
 8003ff6:	60da      	str	r2, [r3, #12]
      break;
 8003ff8:	e01d      	b.n	8004036 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0204 	orr.w	r2, r2, #4
 8004008:	60da      	str	r2, [r3, #12]
      break;
 800400a:	e014      	b.n	8004036 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0208 	orr.w	r2, r2, #8
 800401a:	60da      	str	r2, [r3, #12]
      break;
 800401c:	e00b      	b.n	8004036 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0210 	orr.w	r2, r2, #16
 800402c:	60da      	str	r2, [r3, #12]
      break;
 800402e:	e002      	b.n	8004036 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      break;
 8004034:	bf00      	nop
  }

  if (status == HAL_OK)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d141      	bne.n	80040c0 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2201      	movs	r2, #1
 8004042:	6839      	ldr	r1, [r7, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fe2b 	bl	8004ca0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <HAL_TIM_PWM_Start_IT+0x1d4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d107      	bne.n	8004064 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004062:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a18      	ldr	r2, [pc, #96]	@ (80040cc <HAL_TIM_PWM_Start_IT+0x1d4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_TIM_PWM_Start_IT+0x194>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004076:	d009      	beq.n	800408c <HAL_TIM_PWM_Start_IT+0x194>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a14      	ldr	r2, [pc, #80]	@ (80040d0 <HAL_TIM_PWM_Start_IT+0x1d8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_TIM_PWM_Start_IT+0x194>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a13      	ldr	r2, [pc, #76]	@ (80040d4 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d010      	beq.n	80040c0 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e007      	b.n	80040c0 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800

080040d8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d841      	bhi.n	8004170 <HAL_TIM_PWM_Stop_IT+0x98>
 80040ec:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004129 	.word	0x08004129
 80040f8:	08004171 	.word	0x08004171
 80040fc:	08004171 	.word	0x08004171
 8004100:	08004171 	.word	0x08004171
 8004104:	0800413b 	.word	0x0800413b
 8004108:	08004171 	.word	0x08004171
 800410c:	08004171 	.word	0x08004171
 8004110:	08004171 	.word	0x08004171
 8004114:	0800414d 	.word	0x0800414d
 8004118:	08004171 	.word	0x08004171
 800411c:	08004171 	.word	0x08004171
 8004120:	08004171 	.word	0x08004171
 8004124:	0800415f 	.word	0x0800415f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0202 	bic.w	r2, r2, #2
 8004136:	60da      	str	r2, [r3, #12]
      break;
 8004138:	e01d      	b.n	8004176 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0204 	bic.w	r2, r2, #4
 8004148:	60da      	str	r2, [r3, #12]
      break;
 800414a:	e014      	b.n	8004176 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0208 	bic.w	r2, r2, #8
 800415a:	60da      	str	r2, [r3, #12]
      break;
 800415c:	e00b      	b.n	8004176 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0210 	bic.w	r2, r2, #16
 800416c:	60da      	str	r2, [r3, #12]
      break;
 800416e:	e002      	b.n	8004176 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	bf00      	nop
  }

  if (status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d157      	bne.n	800422c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	6839      	ldr	r1, [r7, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fd8b 	bl	8004ca0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a2a      	ldr	r2, [pc, #168]	@ (8004238 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d117      	bne.n	80041c4 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10f      	bne.n	80041c4 <HAL_TIM_PWM_Stop_IT+0xec>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_PWM_Stop_IT+0xec>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6a1a      	ldr	r2, [r3, #32]
 80041ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10f      	bne.n	80041f4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	f240 4344 	movw	r3, #1092	@ 0x444
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <HAL_TIM_PWM_Stop_IT+0x12c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004202:	e013      	b.n	800422c <HAL_TIM_PWM_Stop_IT+0x154>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d104      	bne.n	8004214 <HAL_TIM_PWM_Stop_IT+0x13c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004212:	e00b      	b.n	800422c <HAL_TIM_PWM_Stop_IT+0x154>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b08      	cmp	r3, #8
 8004218:	d104      	bne.n	8004224 <HAL_TIM_PWM_Stop_IT+0x14c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004222:	e003      	b.n	800422c <HAL_TIM_PWM_Stop_IT+0x154>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00

0800423c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d020      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01b      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0202 	mvn.w	r2, #2
 8004270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fa63 	bl	8004752 <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa56 	bl	8004740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fa65 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d020      	beq.n	80042ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01b      	beq.n	80042ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0204 	mvn.w	r2, #4
 80042bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fa3d 	bl	8004752 <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fa30 	bl	8004740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fa3f 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d020      	beq.n	8004338 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01b      	beq.n	8004338 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0208 	mvn.w	r2, #8
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2204      	movs	r2, #4
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fa17 	bl	8004752 <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fa0a 	bl	8004740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fa19 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	d020      	beq.n	8004384 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01b      	beq.n	8004384 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0210 	mvn.w	r2, #16
 8004354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2208      	movs	r2, #8
 800435a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f9f1 	bl	8004752 <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9e4 	bl	8004740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f9f3 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00c      	beq.n	80043a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0201 	mvn.w	r2, #1
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f9c3 	bl	800472e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fcf5 	bl	8004db6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9c3 	bl	8004776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00c      	beq.n	8004414 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0220 	mvn.w	r2, #32
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fcc8 	bl	8004da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004436:	2302      	movs	r3, #2
 8004438:	e0ae      	b.n	8004598 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	f200 809f 	bhi.w	8004588 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800444a:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004485 	.word	0x08004485
 8004454:	08004589 	.word	0x08004589
 8004458:	08004589 	.word	0x08004589
 800445c:	08004589 	.word	0x08004589
 8004460:	080044c5 	.word	0x080044c5
 8004464:	08004589 	.word	0x08004589
 8004468:	08004589 	.word	0x08004589
 800446c:	08004589 	.word	0x08004589
 8004470:	08004507 	.word	0x08004507
 8004474:	08004589 	.word	0x08004589
 8004478:	08004589 	.word	0x08004589
 800447c:	08004589 	.word	0x08004589
 8004480:	08004547 	.word	0x08004547
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 f9ea 	bl	8004864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0208 	orr.w	r2, r2, #8
 800449e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0204 	bic.w	r2, r2, #4
 80044ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6999      	ldr	r1, [r3, #24]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	619a      	str	r2, [r3, #24]
      break;
 80044c2:	e064      	b.n	800458e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fa30 	bl	8004930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6999      	ldr	r1, [r3, #24]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	021a      	lsls	r2, r3, #8
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	619a      	str	r2, [r3, #24]
      break;
 8004504:	e043      	b.n	800458e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fa79 	bl	8004a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0208 	orr.w	r2, r2, #8
 8004520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0204 	bic.w	r2, r2, #4
 8004530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69d9      	ldr	r1, [r3, #28]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	61da      	str	r2, [r3, #28]
      break;
 8004544:	e023      	b.n	800458e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fac3 	bl	8004ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69d9      	ldr	r1, [r3, #28]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	021a      	lsls	r2, r3, #8
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	61da      	str	r2, [r3, #28]
      break;
 8004586:	e002      	b.n	800458e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	75fb      	strb	r3, [r7, #23]
      break;
 800458c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004596:	7dfb      	ldrb	r3, [r7, #23]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_TIM_ConfigClockSource+0x1c>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e0b4      	b.n	8004726 <HAL_TIM_ConfigClockSource+0x186>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f4:	d03e      	beq.n	8004674 <HAL_TIM_ConfigClockSource+0xd4>
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fa:	f200 8087 	bhi.w	800470c <HAL_TIM_ConfigClockSource+0x16c>
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004602:	f000 8086 	beq.w	8004712 <HAL_TIM_ConfigClockSource+0x172>
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460a:	d87f      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b70      	cmp	r3, #112	@ 0x70
 800460e:	d01a      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0xa6>
 8004610:	2b70      	cmp	r3, #112	@ 0x70
 8004612:	d87b      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b60      	cmp	r3, #96	@ 0x60
 8004616:	d050      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x11a>
 8004618:	2b60      	cmp	r3, #96	@ 0x60
 800461a:	d877      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b50      	cmp	r3, #80	@ 0x50
 800461e:	d03c      	beq.n	800469a <HAL_TIM_ConfigClockSource+0xfa>
 8004620:	2b50      	cmp	r3, #80	@ 0x50
 8004622:	d873      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x16c>
 8004624:	2b40      	cmp	r3, #64	@ 0x40
 8004626:	d058      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x13a>
 8004628:	2b40      	cmp	r3, #64	@ 0x40
 800462a:	d86f      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x16c>
 800462c:	2b30      	cmp	r3, #48	@ 0x30
 800462e:	d064      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x15a>
 8004630:	2b30      	cmp	r3, #48	@ 0x30
 8004632:	d86b      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	2b20      	cmp	r3, #32
 8004636:	d060      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x15a>
 8004638:	2b20      	cmp	r3, #32
 800463a:	d867      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x16c>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05c      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x15a>
 8004640:	2b10      	cmp	r3, #16
 8004642:	d05a      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x15a>
 8004644:	e062      	b.n	800470c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004656:	f000 fb04 	bl	8004c62 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	609a      	str	r2, [r3, #8]
      break;
 8004672:	e04f      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004684:	f000 faed 	bl	8004c62 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004696:	609a      	str	r2, [r3, #8]
      break;
 8004698:	e03c      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a6:	461a      	mov	r2, r3
 80046a8:	f000 fa64 	bl	8004b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2150      	movs	r1, #80	@ 0x50
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fabb 	bl	8004c2e <TIM_ITRx_SetConfig>
      break;
 80046b8:	e02c      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c6:	461a      	mov	r2, r3
 80046c8:	f000 fa82 	bl	8004bd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2160      	movs	r1, #96	@ 0x60
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 faab 	bl	8004c2e <TIM_ITRx_SetConfig>
      break;
 80046d8:	e01c      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	461a      	mov	r2, r3
 80046e8:	f000 fa44 	bl	8004b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2140      	movs	r1, #64	@ 0x40
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fa9b 	bl	8004c2e <TIM_ITRx_SetConfig>
      break;
 80046f8:	e00c      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f000 fa92 	bl	8004c2e <TIM_ITRx_SetConfig>
      break;
 800470a:	e003      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      break;
 8004710:	e000      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004724:	7bfb      	ldrb	r3, [r7, #15]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr

08004752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a2f      	ldr	r2, [pc, #188]	@ (8004858 <TIM_Base_SetConfig+0xd0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00b      	beq.n	80047b8 <TIM_Base_SetConfig+0x30>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a6:	d007      	beq.n	80047b8 <TIM_Base_SetConfig+0x30>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2c      	ldr	r2, [pc, #176]	@ (800485c <TIM_Base_SetConfig+0xd4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_Base_SetConfig+0x30>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004860 <TIM_Base_SetConfig+0xd8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d108      	bne.n	80047ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a22      	ldr	r2, [pc, #136]	@ (8004858 <TIM_Base_SetConfig+0xd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00b      	beq.n	80047ea <TIM_Base_SetConfig+0x62>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d8:	d007      	beq.n	80047ea <TIM_Base_SetConfig+0x62>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1f      	ldr	r2, [pc, #124]	@ (800485c <TIM_Base_SetConfig+0xd4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_Base_SetConfig+0x62>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004860 <TIM_Base_SetConfig+0xd8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d108      	bne.n	80047fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a0d      	ldr	r2, [pc, #52]	@ (8004858 <TIM_Base_SetConfig+0xd0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d103      	bne.n	8004830 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	611a      	str	r2, [r3, #16]
  }
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800

08004864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f023 0201 	bic.w	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 0302 	bic.w	r3, r3, #2
 80048ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <TIM_OC1_SetConfig+0xc8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10c      	bne.n	80048da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0308 	bic.w	r3, r3, #8
 80048c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a13      	ldr	r2, [pc, #76]	@ (800492c <TIM_OC1_SetConfig+0xc8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d111      	bne.n	8004906 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	621a      	str	r2, [r3, #32]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40012c00 	.word	0x40012c00

08004930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f023 0210 	bic.w	r2, r3, #16
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0320 	bic.w	r3, r3, #32
 800497a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a00 <TIM_OC2_SetConfig+0xd0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10d      	bne.n	80049ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <TIM_OC2_SetConfig+0xd0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d113      	bne.n	80049dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	621a      	str	r2, [r3, #32]
}
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr
 8004a00:	40012c00 	.word	0x40012c00

08004a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <TIM_OC3_SetConfig+0xd0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10d      	bne.n	8004a7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a14      	ldr	r2, [pc, #80]	@ (8004ad4 <TIM_OC3_SetConfig+0xd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d113      	bne.n	8004aae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	621a      	str	r2, [r3, #32]
}
 8004ac8:	bf00      	nop
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40012c00 	.word	0x40012c00

08004ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0f      	ldr	r2, [pc, #60]	@ (8004b70 <TIM_OC4_SetConfig+0x98>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d109      	bne.n	8004b4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00

08004b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0201 	bic.w	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 030a 	bic.w	r3, r3, #10
 8004bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f023 0210 	bic.w	r2, r3, #16
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	031b      	lsls	r3, r3, #12
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	621a      	str	r2, [r3, #32]
}
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f043 0307 	orr.w	r3, r3, #7
 8004c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	609a      	str	r2, [r3, #8]
}
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1a      	ldr	r2, [r3, #32]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1a      	ldr	r2, [r3, #32]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e046      	b.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a16      	ldr	r2, [pc, #88]	@ (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4c:	d009      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a10      	ldr	r2, [pc, #64]	@ (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10c      	bne.n	8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800

08004da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e042      	b.n	8004e60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fc fac2 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2224      	movs	r2, #36	@ 0x24
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fd63 	bl	80058d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	@ 0x28
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d175      	bne.n	8004f74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_UART_Transmit+0x2c>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e06e      	b.n	8004f76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2221      	movs	r2, #33	@ 0x21
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ea6:	f7fc fbdf 	bl	8001668 <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	88fa      	ldrh	r2, [r7, #6]
 8004eb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec0:	d108      	bne.n	8004ed4 <HAL_UART_Transmit+0x6c>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d104      	bne.n	8004ed4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	e003      	b.n	8004edc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004edc:	e02e      	b.n	8004f3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2180      	movs	r1, #128	@ 0x80
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fb01 	bl	80054f0 <UART_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e03a      	b.n	8004f76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	3302      	adds	r3, #2
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	e007      	b.n	8004f2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1cb      	bne.n	8004ede <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2140      	movs	r1, #64	@ 0x40
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 facd 	bl	80054f0 <UART_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e006      	b.n	8004f76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b0ba      	sub	sp, #232	@ 0xe8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x66>
 8004fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fbbc 	bl	800575c <UART_Receive_IT>
      return;
 8004fe4:	e25b      	b.n	800549e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 80de 	beq.w	80051ac <HAL_UART_IRQHandler+0x22c>
 8004ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005000:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80d1 	beq.w	80051ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <HAL_UART_IRQHandler+0xae>
 8005016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800501a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	f043 0201 	orr.w	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <HAL_UART_IRQHandler+0xd2>
 800503a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504a:	f043 0202 	orr.w	r2, r3, #2
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_UART_IRQHandler+0xf6>
 800505e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506e:	f043 0204 	orr.w	r2, r3, #4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d011      	beq.n	80050a6 <HAL_UART_IRQHandler+0x126>
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800508e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509e:	f043 0208 	orr.w	r2, r3, #8
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 81f2 	beq.w	8005494 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_UART_IRQHandler+0x14e>
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fb47 	bl	800575c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <HAL_UART_IRQHandler+0x17a>
 80050f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04f      	beq.n	800519a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fa51 	bl	80055a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d041      	beq.n	8005192 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005124:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800512c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800513a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800513e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1d9      	bne.n	800510e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d013      	beq.n	800518a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	4a7e      	ldr	r2, [pc, #504]	@ (8005360 <HAL_UART_IRQHandler+0x3e0>)
 8005168:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516e:	4618      	mov	r0, r3
 8005170:	f7fc fedc 	bl	8001f2c <HAL_DMA_Abort_IT>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d016      	beq.n	80051a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005184:	4610      	mov	r0, r2
 8005186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	e00e      	b.n	80051a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f99c 	bl	80054c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	e00a      	b.n	80051a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f998 	bl	80054c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	e006      	b.n	80051a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f994 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051a6:	e175      	b.n	8005494 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	bf00      	nop
    return;
 80051aa:	e173      	b.n	8005494 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	f040 814f 	bne.w	8005454 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8148 	beq.w	8005454 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8141 	beq.w	8005454 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80b6 	beq.w	8005364 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005204:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8145 	beq.w	8005498 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005216:	429a      	cmp	r2, r3
 8005218:	f080 813e 	bcs.w	8005498 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005222:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b20      	cmp	r3, #32
 800522c:	f000 8088 	beq.w	8005340 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005246:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800524a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800524e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800525c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005260:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005268:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1d9      	bne.n	8005230 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3314      	adds	r3, #20
 8005282:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800528c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e1      	bne.n	800527c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3314      	adds	r3, #20
 80052be:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3314      	adds	r3, #20
 80052d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e3      	bne.n	80052b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800530e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005310:	f023 0310 	bic.w	r3, r3, #16
 8005314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005322:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005324:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005328:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e3      	bne.n	80052fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc fdbb 	bl	8001eb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800534e:	b29b      	uxth	r3, r3
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	b29b      	uxth	r3, r3
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f8bf 	bl	80054da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800535c:	e09c      	b.n	8005498 <HAL_UART_IRQHandler+0x518>
 800535e:	bf00      	nop
 8005360:	08005667 	.word	0x08005667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800536c:	b29b      	uxth	r3, r3
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 808e 	beq.w	800549c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8089 	beq.w	800549c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80053b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e3      	bne.n	800538a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3314      	adds	r3, #20
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	623b      	str	r3, [r7, #32]
   return(result);
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3314      	adds	r3, #20
 80053e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e3      	bne.n	80053c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	60fb      	str	r3, [r7, #12]
   return(result);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0310 	bic.w	r3, r3, #16
 800541e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800542c:	61fa      	str	r2, [r7, #28]
 800542e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	69b9      	ldr	r1, [r7, #24]
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	617b      	str	r3, [r7, #20]
   return(result);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e3      	bne.n	8005408 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005446:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f844 	bl	80054da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005452:	e023      	b.n	800549c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <HAL_UART_IRQHandler+0x4f4>
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f90e 	bl	800568e <UART_Transmit_IT>
    return;
 8005472:	e014      	b.n	800549e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00e      	beq.n	800549e <HAL_UART_IRQHandler+0x51e>
 8005480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f94d 	bl	800572c <UART_EndTransmit_IT>
    return;
 8005492:	e004      	b.n	800549e <HAL_UART_IRQHandler+0x51e>
    return;
 8005494:	bf00      	nop
 8005496:	e002      	b.n	800549e <HAL_UART_IRQHandler+0x51e>
      return;
 8005498:	bf00      	nop
 800549a:	e000      	b.n	800549e <HAL_UART_IRQHandler+0x51e>
      return;
 800549c:	bf00      	nop
  }
}
 800549e:	37e8      	adds	r7, #232	@ 0xe8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr

080054f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005500:	e03b      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d037      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550a:	f7fc f8ad 	bl	8001668 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	429a      	cmp	r2, r3
 8005518:	d302      	bcc.n	8005520 <UART_WaitOnFlagUntilTimeout+0x30>
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e03a      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d023      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b80      	cmp	r3, #128	@ 0x80
 8005536:	d020      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d01d      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b08      	cmp	r3, #8
 800554a:	d116      	bne.n	800557a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f81d 	bl	80055a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2208      	movs	r2, #8
 800556c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e00f      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	429a      	cmp	r2, r3
 8005596:	d0b4      	beq.n	8005502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b095      	sub	sp, #84	@ 0x54
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	330c      	adds	r3, #12
 80055b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80055cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e5      	bne.n	80055aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3314      	adds	r3, #20
 80055e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3314      	adds	r3, #20
 80055fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e5      	bne.n	80055de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	2b01      	cmp	r3, #1
 8005618:	d119      	bne.n	800564e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	60bb      	str	r3, [r7, #8]
   return(result);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f023 0310 	bic.w	r3, r3, #16
 8005630:	647b      	str	r3, [r7, #68]	@ 0x44
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800563a:	61ba      	str	r2, [r7, #24]
 800563c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6979      	ldr	r1, [r7, #20]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	613b      	str	r3, [r7, #16]
   return(result);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e5      	bne.n	800561a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800565c:	bf00      	nop
 800565e:	3754      	adds	r7, #84	@ 0x54
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff ff21 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b21      	cmp	r3, #33	@ 0x21
 80056a0:	d13e      	bne.n	8005720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056aa:	d114      	bne.n	80056d6 <UART_Transmit_IT+0x48>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d110      	bne.n	80056d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]
 80056d4:	e008      	b.n	80056e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	1c59      	adds	r1, r3, #1
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6211      	str	r1, [r2, #32]
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4619      	mov	r1, r3
 80056f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10f      	bne.n	800571c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800570a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800571a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005742:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fea9 	bl	80054a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	@ 0x30
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b22      	cmp	r3, #34	@ 0x22
 800576e:	f040 80ae 	bne.w	80058ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800577a:	d117      	bne.n	80057ac <UART_Receive_IT+0x50>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d113      	bne.n	80057ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579a:	b29a      	uxth	r2, r3
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80057aa:	e026      	b.n	80057fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057be:	d007      	beq.n	80057d0 <UART_Receive_IT+0x74>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <UART_Receive_IT+0x82>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e008      	b.n	80057f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29b      	uxth	r3, r3
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4619      	mov	r1, r3
 8005808:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800580a:	2b00      	cmp	r3, #0
 800580c:	d15d      	bne.n	80058ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0220 	bic.w	r2, r2, #32
 800581c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800582c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005850:	2b01      	cmp	r3, #1
 8005852:	d135      	bne.n	80058c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	330c      	adds	r3, #12
 8005860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	613b      	str	r3, [r7, #16]
   return(result);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f023 0310 	bic.w	r3, r3, #16
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587a:	623a      	str	r2, [r7, #32]
 800587c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	69f9      	ldr	r1, [r7, #28]
 8005880:	6a3a      	ldr	r2, [r7, #32]
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	61bb      	str	r3, [r7, #24]
   return(result);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b10      	cmp	r3, #16
 800589a:	d10a      	bne.n	80058b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fe0e 	bl	80054da <HAL_UARTEx_RxEventCallback>
 80058be:	e002      	b.n	80058c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fdf8 	bl	80054b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e002      	b.n	80058d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e000      	b.n	80058d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3730      	adds	r7, #48	@ 0x30
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005912:	f023 030c 	bic.w	r3, r3, #12
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	430b      	orrs	r3, r1
 800591e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2c      	ldr	r2, [pc, #176]	@ (80059ec <UART_SetConfig+0x114>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d103      	bne.n	8005948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005940:	f7fe f94a 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	e002      	b.n	800594e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fe f932 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 800594c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009a      	lsls	r2, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	4a22      	ldr	r2, [pc, #136]	@ (80059f0 <UART_SetConfig+0x118>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	0119      	lsls	r1, r3, #4
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009a      	lsls	r2, r3, #2
 8005978:	441a      	add	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	fbb2 f2f3 	udiv	r2, r2, r3
 8005984:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <UART_SetConfig+0x118>)
 8005986:	fba3 0302 	umull	r0, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	2064      	movs	r0, #100	@ 0x64
 800598e:	fb00 f303 	mul.w	r3, r0, r3
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	3332      	adds	r3, #50	@ 0x32
 8005998:	4a15      	ldr	r2, [pc, #84]	@ (80059f0 <UART_SetConfig+0x118>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059a4:	4419      	add	r1, r3
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009a      	lsls	r2, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059bc:	4b0c      	ldr	r3, [pc, #48]	@ (80059f0 <UART_SetConfig+0x118>)
 80059be:	fba3 0302 	umull	r0, r3, r3, r2
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	2064      	movs	r0, #100	@ 0x64
 80059c6:	fb00 f303 	mul.w	r3, r0, r3
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	3332      	adds	r3, #50	@ 0x32
 80059d0:	4a07      	ldr	r2, [pc, #28]	@ (80059f0 <UART_SetConfig+0x118>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	440a      	add	r2, r1
 80059e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40013800 	.word	0x40013800
 80059f0:	51eb851f 	.word	0x51eb851f

080059f4 <sniprintf>:
 80059f4:	b40c      	push	{r2, r3}
 80059f6:	b530      	push	{r4, r5, lr}
 80059f8:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <sniprintf+0x64>)
 80059fa:	1e0c      	subs	r4, r1, #0
 80059fc:	681d      	ldr	r5, [r3, #0]
 80059fe:	b09d      	sub	sp, #116	@ 0x74
 8005a00:	da08      	bge.n	8005a14 <sniprintf+0x20>
 8005a02:	238b      	movs	r3, #139	@ 0x8b
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	b01d      	add	sp, #116	@ 0x74
 8005a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a10:	b002      	add	sp, #8
 8005a12:	4770      	bx	lr
 8005a14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005a18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a1c:	bf0c      	ite	eq
 8005a1e:	4623      	moveq	r3, r4
 8005a20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a2c:	9002      	str	r0, [sp, #8]
 8005a2e:	9006      	str	r0, [sp, #24]
 8005a30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a34:	4628      	mov	r0, r5
 8005a36:	ab21      	add	r3, sp, #132	@ 0x84
 8005a38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a3a:	a902      	add	r1, sp, #8
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	f000 f9b3 	bl	8005da8 <_svfiprintf_r>
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	bfbc      	itt	lt
 8005a46:	238b      	movlt	r3, #139	@ 0x8b
 8005a48:	602b      	strlt	r3, [r5, #0]
 8005a4a:	2c00      	cmp	r4, #0
 8005a4c:	d0dd      	beq.n	8005a0a <sniprintf+0x16>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	9b02      	ldr	r3, [sp, #8]
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e7d9      	b.n	8005a0a <sniprintf+0x16>
 8005a56:	bf00      	nop
 8005a58:	20000014 	.word	0x20000014

08005a5c <siprintf>:
 8005a5c:	b40e      	push	{r1, r2, r3}
 8005a5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a62:	b500      	push	{lr}
 8005a64:	b09c      	sub	sp, #112	@ 0x70
 8005a66:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a68:	9002      	str	r0, [sp, #8]
 8005a6a:	9006      	str	r0, [sp, #24]
 8005a6c:	9107      	str	r1, [sp, #28]
 8005a6e:	9104      	str	r1, [sp, #16]
 8005a70:	4808      	ldr	r0, [pc, #32]	@ (8005a94 <siprintf+0x38>)
 8005a72:	4909      	ldr	r1, [pc, #36]	@ (8005a98 <siprintf+0x3c>)
 8005a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a78:	9105      	str	r1, [sp, #20]
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	a902      	add	r1, sp, #8
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	f000 f992 	bl	8005da8 <_svfiprintf_r>
 8005a84:	2200      	movs	r2, #0
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	b01c      	add	sp, #112	@ 0x70
 8005a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a90:	b003      	add	sp, #12
 8005a92:	4770      	bx	lr
 8005a94:	20000014 	.word	0x20000014
 8005a98:	ffff0208 	.word	0xffff0208

08005a9c <memset>:
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	4402      	add	r2, r0
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d100      	bne.n	8005aa6 <memset+0xa>
 8005aa4:	4770      	bx	lr
 8005aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aaa:	e7f9      	b.n	8005aa0 <memset+0x4>

08005aac <__errno>:
 8005aac:	4b01      	ldr	r3, [pc, #4]	@ (8005ab4 <__errno+0x8>)
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000014 	.word	0x20000014

08005ab8 <__libc_init_array>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	2600      	movs	r6, #0
 8005abc:	4d0c      	ldr	r5, [pc, #48]	@ (8005af0 <__libc_init_array+0x38>)
 8005abe:	4c0d      	ldr	r4, [pc, #52]	@ (8005af4 <__libc_init_array+0x3c>)
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	42a6      	cmp	r6, r4
 8005ac6:	d109      	bne.n	8005adc <__libc_init_array+0x24>
 8005ac8:	f000 fc78 	bl	80063bc <_init>
 8005acc:	2600      	movs	r6, #0
 8005ace:	4d0a      	ldr	r5, [pc, #40]	@ (8005af8 <__libc_init_array+0x40>)
 8005ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8005afc <__libc_init_array+0x44>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	42a6      	cmp	r6, r4
 8005ad8:	d105      	bne.n	8005ae6 <__libc_init_array+0x2e>
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae0:	4798      	blx	r3
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	e7ee      	b.n	8005ac4 <__libc_init_array+0xc>
 8005ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aea:	4798      	blx	r3
 8005aec:	3601      	adds	r6, #1
 8005aee:	e7f2      	b.n	8005ad6 <__libc_init_array+0x1e>
 8005af0:	080064a4 	.word	0x080064a4
 8005af4:	080064a4 	.word	0x080064a4
 8005af8:	080064a4 	.word	0x080064a4
 8005afc:	080064a8 	.word	0x080064a8

08005b00 <__retarget_lock_acquire_recursive>:
 8005b00:	4770      	bx	lr

08005b02 <__retarget_lock_release_recursive>:
 8005b02:	4770      	bx	lr

08005b04 <_free_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4605      	mov	r5, r0
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	d040      	beq.n	8005b8e <_free_r+0x8a>
 8005b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b10:	1f0c      	subs	r4, r1, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bfb8      	it	lt
 8005b16:	18e4      	addlt	r4, r4, r3
 8005b18:	f000 f8de 	bl	8005cd8 <__malloc_lock>
 8005b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b90 <_free_r+0x8c>)
 8005b1e:	6813      	ldr	r3, [r2, #0]
 8005b20:	b933      	cbnz	r3, 8005b30 <_free_r+0x2c>
 8005b22:	6063      	str	r3, [r4, #4]
 8005b24:	6014      	str	r4, [r2, #0]
 8005b26:	4628      	mov	r0, r5
 8005b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2c:	f000 b8da 	b.w	8005ce4 <__malloc_unlock>
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	d908      	bls.n	8005b46 <_free_r+0x42>
 8005b34:	6820      	ldr	r0, [r4, #0]
 8005b36:	1821      	adds	r1, r4, r0
 8005b38:	428b      	cmp	r3, r1
 8005b3a:	bf01      	itttt	eq
 8005b3c:	6819      	ldreq	r1, [r3, #0]
 8005b3e:	685b      	ldreq	r3, [r3, #4]
 8005b40:	1809      	addeq	r1, r1, r0
 8005b42:	6021      	streq	r1, [r4, #0]
 8005b44:	e7ed      	b.n	8005b22 <_free_r+0x1e>
 8005b46:	461a      	mov	r2, r3
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	b10b      	cbz	r3, 8005b50 <_free_r+0x4c>
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	d9fa      	bls.n	8005b46 <_free_r+0x42>
 8005b50:	6811      	ldr	r1, [r2, #0]
 8005b52:	1850      	adds	r0, r2, r1
 8005b54:	42a0      	cmp	r0, r4
 8005b56:	d10b      	bne.n	8005b70 <_free_r+0x6c>
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	4401      	add	r1, r0
 8005b5c:	1850      	adds	r0, r2, r1
 8005b5e:	4283      	cmp	r3, r0
 8005b60:	6011      	str	r1, [r2, #0]
 8005b62:	d1e0      	bne.n	8005b26 <_free_r+0x22>
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4408      	add	r0, r1
 8005b6a:	6010      	str	r0, [r2, #0]
 8005b6c:	6053      	str	r3, [r2, #4]
 8005b6e:	e7da      	b.n	8005b26 <_free_r+0x22>
 8005b70:	d902      	bls.n	8005b78 <_free_r+0x74>
 8005b72:	230c      	movs	r3, #12
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	e7d6      	b.n	8005b26 <_free_r+0x22>
 8005b78:	6820      	ldr	r0, [r4, #0]
 8005b7a:	1821      	adds	r1, r4, r0
 8005b7c:	428b      	cmp	r3, r1
 8005b7e:	bf01      	itttt	eq
 8005b80:	6819      	ldreq	r1, [r3, #0]
 8005b82:	685b      	ldreq	r3, [r3, #4]
 8005b84:	1809      	addeq	r1, r1, r0
 8005b86:	6021      	streq	r1, [r4, #0]
 8005b88:	6063      	str	r3, [r4, #4]
 8005b8a:	6054      	str	r4, [r2, #4]
 8005b8c:	e7cb      	b.n	8005b26 <_free_r+0x22>
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	20000454 	.word	0x20000454

08005b94 <sbrk_aligned>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	4e0f      	ldr	r6, [pc, #60]	@ (8005bd4 <sbrk_aligned+0x40>)
 8005b98:	460c      	mov	r4, r1
 8005b9a:	6831      	ldr	r1, [r6, #0]
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	b911      	cbnz	r1, 8005ba6 <sbrk_aligned+0x12>
 8005ba0:	f000 fbaa 	bl	80062f8 <_sbrk_r>
 8005ba4:	6030      	str	r0, [r6, #0]
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	4628      	mov	r0, r5
 8005baa:	f000 fba5 	bl	80062f8 <_sbrk_r>
 8005bae:	1c43      	adds	r3, r0, #1
 8005bb0:	d103      	bne.n	8005bba <sbrk_aligned+0x26>
 8005bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	1cc4      	adds	r4, r0, #3
 8005bbc:	f024 0403 	bic.w	r4, r4, #3
 8005bc0:	42a0      	cmp	r0, r4
 8005bc2:	d0f8      	beq.n	8005bb6 <sbrk_aligned+0x22>
 8005bc4:	1a21      	subs	r1, r4, r0
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 fb96 	bl	80062f8 <_sbrk_r>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d1f2      	bne.n	8005bb6 <sbrk_aligned+0x22>
 8005bd0:	e7ef      	b.n	8005bb2 <sbrk_aligned+0x1e>
 8005bd2:	bf00      	nop
 8005bd4:	20000450 	.word	0x20000450

08005bd8 <_malloc_r>:
 8005bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	1ccd      	adds	r5, r1, #3
 8005bde:	f025 0503 	bic.w	r5, r5, #3
 8005be2:	3508      	adds	r5, #8
 8005be4:	2d0c      	cmp	r5, #12
 8005be6:	bf38      	it	cc
 8005be8:	250c      	movcc	r5, #12
 8005bea:	2d00      	cmp	r5, #0
 8005bec:	4606      	mov	r6, r0
 8005bee:	db01      	blt.n	8005bf4 <_malloc_r+0x1c>
 8005bf0:	42a9      	cmp	r1, r5
 8005bf2:	d904      	bls.n	8005bfe <_malloc_r+0x26>
 8005bf4:	230c      	movs	r3, #12
 8005bf6:	6033      	str	r3, [r6, #0]
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cd4 <_malloc_r+0xfc>
 8005c02:	f000 f869 	bl	8005cd8 <__malloc_lock>
 8005c06:	f8d8 3000 	ldr.w	r3, [r8]
 8005c0a:	461c      	mov	r4, r3
 8005c0c:	bb44      	cbnz	r4, 8005c60 <_malloc_r+0x88>
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4630      	mov	r0, r6
 8005c12:	f7ff ffbf 	bl	8005b94 <sbrk_aligned>
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	4604      	mov	r4, r0
 8005c1a:	d158      	bne.n	8005cce <_malloc_r+0xf6>
 8005c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8005c20:	4627      	mov	r7, r4
 8005c22:	2f00      	cmp	r7, #0
 8005c24:	d143      	bne.n	8005cae <_malloc_r+0xd6>
 8005c26:	2c00      	cmp	r4, #0
 8005c28:	d04b      	beq.n	8005cc2 <_malloc_r+0xea>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	4630      	mov	r0, r6
 8005c30:	eb04 0903 	add.w	r9, r4, r3
 8005c34:	f000 fb60 	bl	80062f8 <_sbrk_r>
 8005c38:	4581      	cmp	r9, r0
 8005c3a:	d142      	bne.n	8005cc2 <_malloc_r+0xea>
 8005c3c:	6821      	ldr	r1, [r4, #0]
 8005c3e:	4630      	mov	r0, r6
 8005c40:	1a6d      	subs	r5, r5, r1
 8005c42:	4629      	mov	r1, r5
 8005c44:	f7ff ffa6 	bl	8005b94 <sbrk_aligned>
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d03a      	beq.n	8005cc2 <_malloc_r+0xea>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	442b      	add	r3, r5
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	f8d8 3000 	ldr.w	r3, [r8]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	bb62      	cbnz	r2, 8005cb4 <_malloc_r+0xdc>
 8005c5a:	f8c8 7000 	str.w	r7, [r8]
 8005c5e:	e00f      	b.n	8005c80 <_malloc_r+0xa8>
 8005c60:	6822      	ldr	r2, [r4, #0]
 8005c62:	1b52      	subs	r2, r2, r5
 8005c64:	d420      	bmi.n	8005ca8 <_malloc_r+0xd0>
 8005c66:	2a0b      	cmp	r2, #11
 8005c68:	d917      	bls.n	8005c9a <_malloc_r+0xc2>
 8005c6a:	1961      	adds	r1, r4, r5
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	6025      	str	r5, [r4, #0]
 8005c70:	bf18      	it	ne
 8005c72:	6059      	strne	r1, [r3, #4]
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	bf08      	it	eq
 8005c78:	f8c8 1000 	streq.w	r1, [r8]
 8005c7c:	5162      	str	r2, [r4, r5]
 8005c7e:	604b      	str	r3, [r1, #4]
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f82f 	bl	8005ce4 <__malloc_unlock>
 8005c86:	f104 000b 	add.w	r0, r4, #11
 8005c8a:	1d23      	adds	r3, r4, #4
 8005c8c:	f020 0007 	bic.w	r0, r0, #7
 8005c90:	1ac2      	subs	r2, r0, r3
 8005c92:	bf1c      	itt	ne
 8005c94:	1a1b      	subne	r3, r3, r0
 8005c96:	50a3      	strne	r3, [r4, r2]
 8005c98:	e7af      	b.n	8005bfa <_malloc_r+0x22>
 8005c9a:	6862      	ldr	r2, [r4, #4]
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	bf0c      	ite	eq
 8005ca0:	f8c8 2000 	streq.w	r2, [r8]
 8005ca4:	605a      	strne	r2, [r3, #4]
 8005ca6:	e7eb      	b.n	8005c80 <_malloc_r+0xa8>
 8005ca8:	4623      	mov	r3, r4
 8005caa:	6864      	ldr	r4, [r4, #4]
 8005cac:	e7ae      	b.n	8005c0c <_malloc_r+0x34>
 8005cae:	463c      	mov	r4, r7
 8005cb0:	687f      	ldr	r7, [r7, #4]
 8005cb2:	e7b6      	b.n	8005c22 <_malloc_r+0x4a>
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d1fb      	bne.n	8005cb4 <_malloc_r+0xdc>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	6053      	str	r3, [r2, #4]
 8005cc0:	e7de      	b.n	8005c80 <_malloc_r+0xa8>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	6033      	str	r3, [r6, #0]
 8005cc8:	f000 f80c 	bl	8005ce4 <__malloc_unlock>
 8005ccc:	e794      	b.n	8005bf8 <_malloc_r+0x20>
 8005cce:	6005      	str	r5, [r0, #0]
 8005cd0:	e7d6      	b.n	8005c80 <_malloc_r+0xa8>
 8005cd2:	bf00      	nop
 8005cd4:	20000454 	.word	0x20000454

08005cd8 <__malloc_lock>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	@ (8005ce0 <__malloc_lock+0x8>)
 8005cda:	f7ff bf11 	b.w	8005b00 <__retarget_lock_acquire_recursive>
 8005cde:	bf00      	nop
 8005ce0:	2000044c 	.word	0x2000044c

08005ce4 <__malloc_unlock>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	@ (8005cec <__malloc_unlock+0x8>)
 8005ce6:	f7ff bf0c 	b.w	8005b02 <__retarget_lock_release_recursive>
 8005cea:	bf00      	nop
 8005cec:	2000044c 	.word	0x2000044c

08005cf0 <__ssputs_r>:
 8005cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	461f      	mov	r7, r3
 8005cf6:	688e      	ldr	r6, [r1, #8]
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	42be      	cmp	r6, r7
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	4690      	mov	r8, r2
 8005d00:	680b      	ldr	r3, [r1, #0]
 8005d02:	d82d      	bhi.n	8005d60 <__ssputs_r+0x70>
 8005d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d0c:	d026      	beq.n	8005d5c <__ssputs_r+0x6c>
 8005d0e:	6965      	ldr	r5, [r4, #20]
 8005d10:	6909      	ldr	r1, [r1, #16]
 8005d12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d16:	eba3 0901 	sub.w	r9, r3, r1
 8005d1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d1e:	1c7b      	adds	r3, r7, #1
 8005d20:	444b      	add	r3, r9
 8005d22:	106d      	asrs	r5, r5, #1
 8005d24:	429d      	cmp	r5, r3
 8005d26:	bf38      	it	cc
 8005d28:	461d      	movcc	r5, r3
 8005d2a:	0553      	lsls	r3, r2, #21
 8005d2c:	d527      	bpl.n	8005d7e <__ssputs_r+0x8e>
 8005d2e:	4629      	mov	r1, r5
 8005d30:	f7ff ff52 	bl	8005bd8 <_malloc_r>
 8005d34:	4606      	mov	r6, r0
 8005d36:	b360      	cbz	r0, 8005d92 <__ssputs_r+0xa2>
 8005d38:	464a      	mov	r2, r9
 8005d3a:	6921      	ldr	r1, [r4, #16]
 8005d3c:	f000 fafa 	bl	8006334 <memcpy>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	6126      	str	r6, [r4, #16]
 8005d4e:	444e      	add	r6, r9
 8005d50:	6026      	str	r6, [r4, #0]
 8005d52:	463e      	mov	r6, r7
 8005d54:	6165      	str	r5, [r4, #20]
 8005d56:	eba5 0509 	sub.w	r5, r5, r9
 8005d5a:	60a5      	str	r5, [r4, #8]
 8005d5c:	42be      	cmp	r6, r7
 8005d5e:	d900      	bls.n	8005d62 <__ssputs_r+0x72>
 8005d60:	463e      	mov	r6, r7
 8005d62:	4632      	mov	r2, r6
 8005d64:	4641      	mov	r1, r8
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	f000 faac 	bl	80062c4 <memmove>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	68a3      	ldr	r3, [r4, #8]
 8005d70:	1b9b      	subs	r3, r3, r6
 8005d72:	60a3      	str	r3, [r4, #8]
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	4433      	add	r3, r6
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7e:	462a      	mov	r2, r5
 8005d80:	f000 fae6 	bl	8006350 <_realloc_r>
 8005d84:	4606      	mov	r6, r0
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d1e0      	bne.n	8005d4c <__ssputs_r+0x5c>
 8005d8a:	4650      	mov	r0, sl
 8005d8c:	6921      	ldr	r1, [r4, #16]
 8005d8e:	f7ff feb9 	bl	8005b04 <_free_r>
 8005d92:	230c      	movs	r3, #12
 8005d94:	f8ca 3000 	str.w	r3, [sl]
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da2:	81a3      	strh	r3, [r4, #12]
 8005da4:	e7e9      	b.n	8005d7a <__ssputs_r+0x8a>
	...

08005da8 <_svfiprintf_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	4698      	mov	r8, r3
 8005dae:	898b      	ldrh	r3, [r1, #12]
 8005db0:	4607      	mov	r7, r0
 8005db2:	061b      	lsls	r3, r3, #24
 8005db4:	460d      	mov	r5, r1
 8005db6:	4614      	mov	r4, r2
 8005db8:	b09d      	sub	sp, #116	@ 0x74
 8005dba:	d510      	bpl.n	8005dde <_svfiprintf_r+0x36>
 8005dbc:	690b      	ldr	r3, [r1, #16]
 8005dbe:	b973      	cbnz	r3, 8005dde <_svfiprintf_r+0x36>
 8005dc0:	2140      	movs	r1, #64	@ 0x40
 8005dc2:	f7ff ff09 	bl	8005bd8 <_malloc_r>
 8005dc6:	6028      	str	r0, [r5, #0]
 8005dc8:	6128      	str	r0, [r5, #16]
 8005dca:	b930      	cbnz	r0, 8005dda <_svfiprintf_r+0x32>
 8005dcc:	230c      	movs	r3, #12
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	b01d      	add	sp, #116	@ 0x74
 8005dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dda:	2340      	movs	r3, #64	@ 0x40
 8005ddc:	616b      	str	r3, [r5, #20]
 8005dde:	2300      	movs	r3, #0
 8005de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de2:	2320      	movs	r3, #32
 8005de4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005de8:	2330      	movs	r3, #48	@ 0x30
 8005dea:	f04f 0901 	mov.w	r9, #1
 8005dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005f8c <_svfiprintf_r+0x1e4>
 8005df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	469a      	mov	sl, r3
 8005dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e02:	b10a      	cbz	r2, 8005e08 <_svfiprintf_r+0x60>
 8005e04:	2a25      	cmp	r2, #37	@ 0x25
 8005e06:	d1f9      	bne.n	8005dfc <_svfiprintf_r+0x54>
 8005e08:	ebba 0b04 	subs.w	fp, sl, r4
 8005e0c:	d00b      	beq.n	8005e26 <_svfiprintf_r+0x7e>
 8005e0e:	465b      	mov	r3, fp
 8005e10:	4622      	mov	r2, r4
 8005e12:	4629      	mov	r1, r5
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7ff ff6b 	bl	8005cf0 <__ssputs_r>
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	f000 80a7 	beq.w	8005f6e <_svfiprintf_r+0x1c6>
 8005e20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e22:	445a      	add	r2, fp
 8005e24:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e26:	f89a 3000 	ldrb.w	r3, [sl]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 809f 	beq.w	8005f6e <_svfiprintf_r+0x1c6>
 8005e30:	2300      	movs	r3, #0
 8005e32:	f04f 32ff 	mov.w	r2, #4294967295
 8005e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e3a:	f10a 0a01 	add.w	sl, sl, #1
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	9307      	str	r3, [sp, #28]
 8005e42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e46:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e48:	4654      	mov	r4, sl
 8005e4a:	2205      	movs	r2, #5
 8005e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e50:	484e      	ldr	r0, [pc, #312]	@ (8005f8c <_svfiprintf_r+0x1e4>)
 8005e52:	f000 fa61 	bl	8006318 <memchr>
 8005e56:	9a04      	ldr	r2, [sp, #16]
 8005e58:	b9d8      	cbnz	r0, 8005e92 <_svfiprintf_r+0xea>
 8005e5a:	06d0      	lsls	r0, r2, #27
 8005e5c:	bf44      	itt	mi
 8005e5e:	2320      	movmi	r3, #32
 8005e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e64:	0711      	lsls	r1, r2, #28
 8005e66:	bf44      	itt	mi
 8005e68:	232b      	movmi	r3, #43	@ 0x2b
 8005e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e74:	d015      	beq.n	8005ea2 <_svfiprintf_r+0xfa>
 8005e76:	4654      	mov	r4, sl
 8005e78:	2000      	movs	r0, #0
 8005e7a:	f04f 0c0a 	mov.w	ip, #10
 8005e7e:	9a07      	ldr	r2, [sp, #28]
 8005e80:	4621      	mov	r1, r4
 8005e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e86:	3b30      	subs	r3, #48	@ 0x30
 8005e88:	2b09      	cmp	r3, #9
 8005e8a:	d94b      	bls.n	8005f24 <_svfiprintf_r+0x17c>
 8005e8c:	b1b0      	cbz	r0, 8005ebc <_svfiprintf_r+0x114>
 8005e8e:	9207      	str	r2, [sp, #28]
 8005e90:	e014      	b.n	8005ebc <_svfiprintf_r+0x114>
 8005e92:	eba0 0308 	sub.w	r3, r0, r8
 8005e96:	fa09 f303 	lsl.w	r3, r9, r3
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	46a2      	mov	sl, r4
 8005e9e:	9304      	str	r3, [sp, #16]
 8005ea0:	e7d2      	b.n	8005e48 <_svfiprintf_r+0xa0>
 8005ea2:	9b03      	ldr	r3, [sp, #12]
 8005ea4:	1d19      	adds	r1, r3, #4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	9103      	str	r1, [sp, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bfbb      	ittet	lt
 8005eae:	425b      	neglt	r3, r3
 8005eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8005eb4:	9307      	strge	r3, [sp, #28]
 8005eb6:	9307      	strlt	r3, [sp, #28]
 8005eb8:	bfb8      	it	lt
 8005eba:	9204      	strlt	r2, [sp, #16]
 8005ebc:	7823      	ldrb	r3, [r4, #0]
 8005ebe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ec0:	d10a      	bne.n	8005ed8 <_svfiprintf_r+0x130>
 8005ec2:	7863      	ldrb	r3, [r4, #1]
 8005ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec6:	d132      	bne.n	8005f2e <_svfiprintf_r+0x186>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	3402      	adds	r4, #2
 8005ecc:	1d1a      	adds	r2, r3, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	9203      	str	r2, [sp, #12]
 8005ed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ed6:	9305      	str	r3, [sp, #20]
 8005ed8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005f90 <_svfiprintf_r+0x1e8>
 8005edc:	2203      	movs	r2, #3
 8005ede:	4650      	mov	r0, sl
 8005ee0:	7821      	ldrb	r1, [r4, #0]
 8005ee2:	f000 fa19 	bl	8006318 <memchr>
 8005ee6:	b138      	cbz	r0, 8005ef8 <_svfiprintf_r+0x150>
 8005ee8:	2240      	movs	r2, #64	@ 0x40
 8005eea:	9b04      	ldr	r3, [sp, #16]
 8005eec:	eba0 000a 	sub.w	r0, r0, sl
 8005ef0:	4082      	lsls	r2, r0
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	3401      	adds	r4, #1
 8005ef6:	9304      	str	r3, [sp, #16]
 8005ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005efc:	2206      	movs	r2, #6
 8005efe:	4825      	ldr	r0, [pc, #148]	@ (8005f94 <_svfiprintf_r+0x1ec>)
 8005f00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f04:	f000 fa08 	bl	8006318 <memchr>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d036      	beq.n	8005f7a <_svfiprintf_r+0x1d2>
 8005f0c:	4b22      	ldr	r3, [pc, #136]	@ (8005f98 <_svfiprintf_r+0x1f0>)
 8005f0e:	bb1b      	cbnz	r3, 8005f58 <_svfiprintf_r+0x1b0>
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	3307      	adds	r3, #7
 8005f14:	f023 0307 	bic.w	r3, r3, #7
 8005f18:	3308      	adds	r3, #8
 8005f1a:	9303      	str	r3, [sp, #12]
 8005f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1e:	4433      	add	r3, r6
 8005f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f22:	e76a      	b.n	8005dfa <_svfiprintf_r+0x52>
 8005f24:	460c      	mov	r4, r1
 8005f26:	2001      	movs	r0, #1
 8005f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f2c:	e7a8      	b.n	8005e80 <_svfiprintf_r+0xd8>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f04f 0c0a 	mov.w	ip, #10
 8005f34:	4619      	mov	r1, r3
 8005f36:	3401      	adds	r4, #1
 8005f38:	9305      	str	r3, [sp, #20]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f40:	3a30      	subs	r2, #48	@ 0x30
 8005f42:	2a09      	cmp	r2, #9
 8005f44:	d903      	bls.n	8005f4e <_svfiprintf_r+0x1a6>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0c6      	beq.n	8005ed8 <_svfiprintf_r+0x130>
 8005f4a:	9105      	str	r1, [sp, #20]
 8005f4c:	e7c4      	b.n	8005ed8 <_svfiprintf_r+0x130>
 8005f4e:	4604      	mov	r4, r0
 8005f50:	2301      	movs	r3, #1
 8005f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f56:	e7f0      	b.n	8005f3a <_svfiprintf_r+0x192>
 8005f58:	ab03      	add	r3, sp, #12
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4638      	mov	r0, r7
 8005f60:	4b0e      	ldr	r3, [pc, #56]	@ (8005f9c <_svfiprintf_r+0x1f4>)
 8005f62:	a904      	add	r1, sp, #16
 8005f64:	f3af 8000 	nop.w
 8005f68:	1c42      	adds	r2, r0, #1
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	d1d6      	bne.n	8005f1c <_svfiprintf_r+0x174>
 8005f6e:	89ab      	ldrh	r3, [r5, #12]
 8005f70:	065b      	lsls	r3, r3, #25
 8005f72:	f53f af2d 	bmi.w	8005dd0 <_svfiprintf_r+0x28>
 8005f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f78:	e72c      	b.n	8005dd4 <_svfiprintf_r+0x2c>
 8005f7a:	ab03      	add	r3, sp, #12
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4638      	mov	r0, r7
 8005f82:	4b06      	ldr	r3, [pc, #24]	@ (8005f9c <_svfiprintf_r+0x1f4>)
 8005f84:	a904      	add	r1, sp, #16
 8005f86:	f000 f87d 	bl	8006084 <_printf_i>
 8005f8a:	e7ed      	b.n	8005f68 <_svfiprintf_r+0x1c0>
 8005f8c:	0800646e 	.word	0x0800646e
 8005f90:	08006474 	.word	0x08006474
 8005f94:	08006478 	.word	0x08006478
 8005f98:	00000000 	.word	0x00000000
 8005f9c:	08005cf1 	.word	0x08005cf1

08005fa0 <_printf_common>:
 8005fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa4:	4616      	mov	r6, r2
 8005fa6:	4698      	mov	r8, r3
 8005fa8:	688a      	ldr	r2, [r1, #8]
 8005faa:	690b      	ldr	r3, [r1, #16]
 8005fac:	4607      	mov	r7, r0
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	bfb8      	it	lt
 8005fb2:	4613      	movlt	r3, r2
 8005fb4:	6033      	str	r3, [r6, #0]
 8005fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fba:	460c      	mov	r4, r1
 8005fbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc0:	b10a      	cbz	r2, 8005fc6 <_printf_common+0x26>
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	6033      	str	r3, [r6, #0]
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	0699      	lsls	r1, r3, #26
 8005fca:	bf42      	ittt	mi
 8005fcc:	6833      	ldrmi	r3, [r6, #0]
 8005fce:	3302      	addmi	r3, #2
 8005fd0:	6033      	strmi	r3, [r6, #0]
 8005fd2:	6825      	ldr	r5, [r4, #0]
 8005fd4:	f015 0506 	ands.w	r5, r5, #6
 8005fd8:	d106      	bne.n	8005fe8 <_printf_common+0x48>
 8005fda:	f104 0a19 	add.w	sl, r4, #25
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	6832      	ldr	r2, [r6, #0]
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	42ab      	cmp	r3, r5
 8005fe6:	dc2b      	bgt.n	8006040 <_printf_common+0xa0>
 8005fe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	3b00      	subs	r3, #0
 8005ff0:	bf18      	it	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	0692      	lsls	r2, r2, #26
 8005ff6:	d430      	bmi.n	800605a <_printf_common+0xba>
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006000:	47c8      	blx	r9
 8006002:	3001      	adds	r0, #1
 8006004:	d023      	beq.n	800604e <_printf_common+0xae>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	6922      	ldr	r2, [r4, #16]
 800600a:	f003 0306 	and.w	r3, r3, #6
 800600e:	2b04      	cmp	r3, #4
 8006010:	bf14      	ite	ne
 8006012:	2500      	movne	r5, #0
 8006014:	6833      	ldreq	r3, [r6, #0]
 8006016:	f04f 0600 	mov.w	r6, #0
 800601a:	bf08      	it	eq
 800601c:	68e5      	ldreq	r5, [r4, #12]
 800601e:	f104 041a 	add.w	r4, r4, #26
 8006022:	bf08      	it	eq
 8006024:	1aed      	subeq	r5, r5, r3
 8006026:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800602a:	bf08      	it	eq
 800602c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006030:	4293      	cmp	r3, r2
 8006032:	bfc4      	itt	gt
 8006034:	1a9b      	subgt	r3, r3, r2
 8006036:	18ed      	addgt	r5, r5, r3
 8006038:	42b5      	cmp	r5, r6
 800603a:	d11a      	bne.n	8006072 <_printf_common+0xd2>
 800603c:	2000      	movs	r0, #0
 800603e:	e008      	b.n	8006052 <_printf_common+0xb2>
 8006040:	2301      	movs	r3, #1
 8006042:	4652      	mov	r2, sl
 8006044:	4641      	mov	r1, r8
 8006046:	4638      	mov	r0, r7
 8006048:	47c8      	blx	r9
 800604a:	3001      	adds	r0, #1
 800604c:	d103      	bne.n	8006056 <_printf_common+0xb6>
 800604e:	f04f 30ff 	mov.w	r0, #4294967295
 8006052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006056:	3501      	adds	r5, #1
 8006058:	e7c1      	b.n	8005fde <_printf_common+0x3e>
 800605a:	2030      	movs	r0, #48	@ 0x30
 800605c:	18e1      	adds	r1, r4, r3
 800605e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006068:	4422      	add	r2, r4
 800606a:	3302      	adds	r3, #2
 800606c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006070:	e7c2      	b.n	8005ff8 <_printf_common+0x58>
 8006072:	2301      	movs	r3, #1
 8006074:	4622      	mov	r2, r4
 8006076:	4641      	mov	r1, r8
 8006078:	4638      	mov	r0, r7
 800607a:	47c8      	blx	r9
 800607c:	3001      	adds	r0, #1
 800607e:	d0e6      	beq.n	800604e <_printf_common+0xae>
 8006080:	3601      	adds	r6, #1
 8006082:	e7d9      	b.n	8006038 <_printf_common+0x98>

08006084 <_printf_i>:
 8006084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	7e0f      	ldrb	r7, [r1, #24]
 800608a:	4691      	mov	r9, r2
 800608c:	2f78      	cmp	r7, #120	@ 0x78
 800608e:	4680      	mov	r8, r0
 8006090:	460c      	mov	r4, r1
 8006092:	469a      	mov	sl, r3
 8006094:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800609a:	d807      	bhi.n	80060ac <_printf_i+0x28>
 800609c:	2f62      	cmp	r7, #98	@ 0x62
 800609e:	d80a      	bhi.n	80060b6 <_printf_i+0x32>
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	f000 80d3 	beq.w	800624c <_printf_i+0x1c8>
 80060a6:	2f58      	cmp	r7, #88	@ 0x58
 80060a8:	f000 80ba 	beq.w	8006220 <_printf_i+0x19c>
 80060ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060b4:	e03a      	b.n	800612c <_printf_i+0xa8>
 80060b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ba:	2b15      	cmp	r3, #21
 80060bc:	d8f6      	bhi.n	80060ac <_printf_i+0x28>
 80060be:	a101      	add	r1, pc, #4	@ (adr r1, 80060c4 <_printf_i+0x40>)
 80060c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	08006131 	.word	0x08006131
 80060cc:	080060ad 	.word	0x080060ad
 80060d0:	080060ad 	.word	0x080060ad
 80060d4:	080060ad 	.word	0x080060ad
 80060d8:	080060ad 	.word	0x080060ad
 80060dc:	08006131 	.word	0x08006131
 80060e0:	080060ad 	.word	0x080060ad
 80060e4:	080060ad 	.word	0x080060ad
 80060e8:	080060ad 	.word	0x080060ad
 80060ec:	080060ad 	.word	0x080060ad
 80060f0:	08006233 	.word	0x08006233
 80060f4:	0800615b 	.word	0x0800615b
 80060f8:	080061ed 	.word	0x080061ed
 80060fc:	080060ad 	.word	0x080060ad
 8006100:	080060ad 	.word	0x080060ad
 8006104:	08006255 	.word	0x08006255
 8006108:	080060ad 	.word	0x080060ad
 800610c:	0800615b 	.word	0x0800615b
 8006110:	080060ad 	.word	0x080060ad
 8006114:	080060ad 	.word	0x080060ad
 8006118:	080061f5 	.word	0x080061f5
 800611c:	6833      	ldr	r3, [r6, #0]
 800611e:	1d1a      	adds	r2, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6032      	str	r2, [r6, #0]
 8006124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800612c:	2301      	movs	r3, #1
 800612e:	e09e      	b.n	800626e <_printf_i+0x1ea>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	6820      	ldr	r0, [r4, #0]
 8006134:	1d19      	adds	r1, r3, #4
 8006136:	6031      	str	r1, [r6, #0]
 8006138:	0606      	lsls	r6, r0, #24
 800613a:	d501      	bpl.n	8006140 <_printf_i+0xbc>
 800613c:	681d      	ldr	r5, [r3, #0]
 800613e:	e003      	b.n	8006148 <_printf_i+0xc4>
 8006140:	0645      	lsls	r5, r0, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0xb8>
 8006144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006148:	2d00      	cmp	r5, #0
 800614a:	da03      	bge.n	8006154 <_printf_i+0xd0>
 800614c:	232d      	movs	r3, #45	@ 0x2d
 800614e:	426d      	negs	r5, r5
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006154:	230a      	movs	r3, #10
 8006156:	4859      	ldr	r0, [pc, #356]	@ (80062bc <_printf_i+0x238>)
 8006158:	e011      	b.n	800617e <_printf_i+0xfa>
 800615a:	6821      	ldr	r1, [r4, #0]
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	0608      	lsls	r0, r1, #24
 8006160:	f853 5b04 	ldr.w	r5, [r3], #4
 8006164:	d402      	bmi.n	800616c <_printf_i+0xe8>
 8006166:	0649      	lsls	r1, r1, #25
 8006168:	bf48      	it	mi
 800616a:	b2ad      	uxthmi	r5, r5
 800616c:	2f6f      	cmp	r7, #111	@ 0x6f
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	bf14      	ite	ne
 8006172:	230a      	movne	r3, #10
 8006174:	2308      	moveq	r3, #8
 8006176:	4851      	ldr	r0, [pc, #324]	@ (80062bc <_printf_i+0x238>)
 8006178:	2100      	movs	r1, #0
 800617a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800617e:	6866      	ldr	r6, [r4, #4]
 8006180:	2e00      	cmp	r6, #0
 8006182:	bfa8      	it	ge
 8006184:	6821      	ldrge	r1, [r4, #0]
 8006186:	60a6      	str	r6, [r4, #8]
 8006188:	bfa4      	itt	ge
 800618a:	f021 0104 	bicge.w	r1, r1, #4
 800618e:	6021      	strge	r1, [r4, #0]
 8006190:	b90d      	cbnz	r5, 8006196 <_printf_i+0x112>
 8006192:	2e00      	cmp	r6, #0
 8006194:	d04b      	beq.n	800622e <_printf_i+0x1aa>
 8006196:	4616      	mov	r6, r2
 8006198:	fbb5 f1f3 	udiv	r1, r5, r3
 800619c:	fb03 5711 	mls	r7, r3, r1, r5
 80061a0:	5dc7      	ldrb	r7, [r0, r7]
 80061a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061a6:	462f      	mov	r7, r5
 80061a8:	42bb      	cmp	r3, r7
 80061aa:	460d      	mov	r5, r1
 80061ac:	d9f4      	bls.n	8006198 <_printf_i+0x114>
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d10b      	bne.n	80061ca <_printf_i+0x146>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	07df      	lsls	r7, r3, #31
 80061b6:	d508      	bpl.n	80061ca <_printf_i+0x146>
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	6861      	ldr	r1, [r4, #4]
 80061bc:	4299      	cmp	r1, r3
 80061be:	bfde      	ittt	le
 80061c0:	2330      	movle	r3, #48	@ 0x30
 80061c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ca:	1b92      	subs	r2, r2, r6
 80061cc:	6122      	str	r2, [r4, #16]
 80061ce:	464b      	mov	r3, r9
 80061d0:	4621      	mov	r1, r4
 80061d2:	4640      	mov	r0, r8
 80061d4:	f8cd a000 	str.w	sl, [sp]
 80061d8:	aa03      	add	r2, sp, #12
 80061da:	f7ff fee1 	bl	8005fa0 <_printf_common>
 80061de:	3001      	adds	r0, #1
 80061e0:	d14a      	bne.n	8006278 <_printf_i+0x1f4>
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	b004      	add	sp, #16
 80061e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	f043 0320 	orr.w	r3, r3, #32
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	2778      	movs	r7, #120	@ 0x78
 80061f6:	4832      	ldr	r0, [pc, #200]	@ (80062c0 <_printf_i+0x23c>)
 80061f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6831      	ldr	r1, [r6, #0]
 8006200:	061f      	lsls	r7, r3, #24
 8006202:	f851 5b04 	ldr.w	r5, [r1], #4
 8006206:	d402      	bmi.n	800620e <_printf_i+0x18a>
 8006208:	065f      	lsls	r7, r3, #25
 800620a:	bf48      	it	mi
 800620c:	b2ad      	uxthmi	r5, r5
 800620e:	6031      	str	r1, [r6, #0]
 8006210:	07d9      	lsls	r1, r3, #31
 8006212:	bf44      	itt	mi
 8006214:	f043 0320 	orrmi.w	r3, r3, #32
 8006218:	6023      	strmi	r3, [r4, #0]
 800621a:	b11d      	cbz	r5, 8006224 <_printf_i+0x1a0>
 800621c:	2310      	movs	r3, #16
 800621e:	e7ab      	b.n	8006178 <_printf_i+0xf4>
 8006220:	4826      	ldr	r0, [pc, #152]	@ (80062bc <_printf_i+0x238>)
 8006222:	e7e9      	b.n	80061f8 <_printf_i+0x174>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	f023 0320 	bic.w	r3, r3, #32
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	e7f6      	b.n	800621c <_printf_i+0x198>
 800622e:	4616      	mov	r6, r2
 8006230:	e7bd      	b.n	80061ae <_printf_i+0x12a>
 8006232:	6833      	ldr	r3, [r6, #0]
 8006234:	6825      	ldr	r5, [r4, #0]
 8006236:	1d18      	adds	r0, r3, #4
 8006238:	6961      	ldr	r1, [r4, #20]
 800623a:	6030      	str	r0, [r6, #0]
 800623c:	062e      	lsls	r6, r5, #24
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	d501      	bpl.n	8006246 <_printf_i+0x1c2>
 8006242:	6019      	str	r1, [r3, #0]
 8006244:	e002      	b.n	800624c <_printf_i+0x1c8>
 8006246:	0668      	lsls	r0, r5, #25
 8006248:	d5fb      	bpl.n	8006242 <_printf_i+0x1be>
 800624a:	8019      	strh	r1, [r3, #0]
 800624c:	2300      	movs	r3, #0
 800624e:	4616      	mov	r6, r2
 8006250:	6123      	str	r3, [r4, #16]
 8006252:	e7bc      	b.n	80061ce <_printf_i+0x14a>
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	2100      	movs	r1, #0
 8006258:	1d1a      	adds	r2, r3, #4
 800625a:	6032      	str	r2, [r6, #0]
 800625c:	681e      	ldr	r6, [r3, #0]
 800625e:	6862      	ldr	r2, [r4, #4]
 8006260:	4630      	mov	r0, r6
 8006262:	f000 f859 	bl	8006318 <memchr>
 8006266:	b108      	cbz	r0, 800626c <_printf_i+0x1e8>
 8006268:	1b80      	subs	r0, r0, r6
 800626a:	6060      	str	r0, [r4, #4]
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	2300      	movs	r3, #0
 8006272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006276:	e7aa      	b.n	80061ce <_printf_i+0x14a>
 8006278:	4632      	mov	r2, r6
 800627a:	4649      	mov	r1, r9
 800627c:	4640      	mov	r0, r8
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	47d0      	blx	sl
 8006282:	3001      	adds	r0, #1
 8006284:	d0ad      	beq.n	80061e2 <_printf_i+0x15e>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	079b      	lsls	r3, r3, #30
 800628a:	d413      	bmi.n	80062b4 <_printf_i+0x230>
 800628c:	68e0      	ldr	r0, [r4, #12]
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	4298      	cmp	r0, r3
 8006292:	bfb8      	it	lt
 8006294:	4618      	movlt	r0, r3
 8006296:	e7a6      	b.n	80061e6 <_printf_i+0x162>
 8006298:	2301      	movs	r3, #1
 800629a:	4632      	mov	r2, r6
 800629c:	4649      	mov	r1, r9
 800629e:	4640      	mov	r0, r8
 80062a0:	47d0      	blx	sl
 80062a2:	3001      	adds	r0, #1
 80062a4:	d09d      	beq.n	80061e2 <_printf_i+0x15e>
 80062a6:	3501      	adds	r5, #1
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	1a5b      	subs	r3, r3, r1
 80062ae:	42ab      	cmp	r3, r5
 80062b0:	dcf2      	bgt.n	8006298 <_printf_i+0x214>
 80062b2:	e7eb      	b.n	800628c <_printf_i+0x208>
 80062b4:	2500      	movs	r5, #0
 80062b6:	f104 0619 	add.w	r6, r4, #25
 80062ba:	e7f5      	b.n	80062a8 <_printf_i+0x224>
 80062bc:	0800647f 	.word	0x0800647f
 80062c0:	08006490 	.word	0x08006490

080062c4 <memmove>:
 80062c4:	4288      	cmp	r0, r1
 80062c6:	b510      	push	{r4, lr}
 80062c8:	eb01 0402 	add.w	r4, r1, r2
 80062cc:	d902      	bls.n	80062d4 <memmove+0x10>
 80062ce:	4284      	cmp	r4, r0
 80062d0:	4623      	mov	r3, r4
 80062d2:	d807      	bhi.n	80062e4 <memmove+0x20>
 80062d4:	1e43      	subs	r3, r0, #1
 80062d6:	42a1      	cmp	r1, r4
 80062d8:	d008      	beq.n	80062ec <memmove+0x28>
 80062da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062e2:	e7f8      	b.n	80062d6 <memmove+0x12>
 80062e4:	4601      	mov	r1, r0
 80062e6:	4402      	add	r2, r0
 80062e8:	428a      	cmp	r2, r1
 80062ea:	d100      	bne.n	80062ee <memmove+0x2a>
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062f6:	e7f7      	b.n	80062e8 <memmove+0x24>

080062f8 <_sbrk_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	2300      	movs	r3, #0
 80062fc:	4d05      	ldr	r5, [pc, #20]	@ (8006314 <_sbrk_r+0x1c>)
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	f7fb f8f6 	bl	80014f4 <_sbrk>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_sbrk_r+0x1a>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_sbrk_r+0x1a>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	20000448 	.word	0x20000448

08006318 <memchr>:
 8006318:	4603      	mov	r3, r0
 800631a:	b510      	push	{r4, lr}
 800631c:	b2c9      	uxtb	r1, r1
 800631e:	4402      	add	r2, r0
 8006320:	4293      	cmp	r3, r2
 8006322:	4618      	mov	r0, r3
 8006324:	d101      	bne.n	800632a <memchr+0x12>
 8006326:	2000      	movs	r0, #0
 8006328:	e003      	b.n	8006332 <memchr+0x1a>
 800632a:	7804      	ldrb	r4, [r0, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	428c      	cmp	r4, r1
 8006330:	d1f6      	bne.n	8006320 <memchr+0x8>
 8006332:	bd10      	pop	{r4, pc}

08006334 <memcpy>:
 8006334:	440a      	add	r2, r1
 8006336:	4291      	cmp	r1, r2
 8006338:	f100 33ff 	add.w	r3, r0, #4294967295
 800633c:	d100      	bne.n	8006340 <memcpy+0xc>
 800633e:	4770      	bx	lr
 8006340:	b510      	push	{r4, lr}
 8006342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006346:	4291      	cmp	r1, r2
 8006348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800634c:	d1f9      	bne.n	8006342 <memcpy+0xe>
 800634e:	bd10      	pop	{r4, pc}

08006350 <_realloc_r>:
 8006350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	4680      	mov	r8, r0
 8006356:	4615      	mov	r5, r2
 8006358:	460c      	mov	r4, r1
 800635a:	b921      	cbnz	r1, 8006366 <_realloc_r+0x16>
 800635c:	4611      	mov	r1, r2
 800635e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006362:	f7ff bc39 	b.w	8005bd8 <_malloc_r>
 8006366:	b92a      	cbnz	r2, 8006374 <_realloc_r+0x24>
 8006368:	f7ff fbcc 	bl	8005b04 <_free_r>
 800636c:	2400      	movs	r4, #0
 800636e:	4620      	mov	r0, r4
 8006370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006374:	f000 f81a 	bl	80063ac <_malloc_usable_size_r>
 8006378:	4285      	cmp	r5, r0
 800637a:	4606      	mov	r6, r0
 800637c:	d802      	bhi.n	8006384 <_realloc_r+0x34>
 800637e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006382:	d8f4      	bhi.n	800636e <_realloc_r+0x1e>
 8006384:	4629      	mov	r1, r5
 8006386:	4640      	mov	r0, r8
 8006388:	f7ff fc26 	bl	8005bd8 <_malloc_r>
 800638c:	4607      	mov	r7, r0
 800638e:	2800      	cmp	r0, #0
 8006390:	d0ec      	beq.n	800636c <_realloc_r+0x1c>
 8006392:	42b5      	cmp	r5, r6
 8006394:	462a      	mov	r2, r5
 8006396:	4621      	mov	r1, r4
 8006398:	bf28      	it	cs
 800639a:	4632      	movcs	r2, r6
 800639c:	f7ff ffca 	bl	8006334 <memcpy>
 80063a0:	4621      	mov	r1, r4
 80063a2:	4640      	mov	r0, r8
 80063a4:	f7ff fbae 	bl	8005b04 <_free_r>
 80063a8:	463c      	mov	r4, r7
 80063aa:	e7e0      	b.n	800636e <_realloc_r+0x1e>

080063ac <_malloc_usable_size_r>:
 80063ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b0:	1f18      	subs	r0, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bfbc      	itt	lt
 80063b6:	580b      	ldrlt	r3, [r1, r0]
 80063b8:	18c0      	addlt	r0, r0, r3
 80063ba:	4770      	bx	lr

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
